// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($42) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  exports["CommutativeRing"] = CommutativeRing;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };                                                       
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                                                          
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 96, column 3 - line 96, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  };
  var monadRecMaybe = new MonadRec(function () {
      return Data_Maybe.monadMaybe;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return new Done(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                  return new Done(new Data_Maybe.Just(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 120, column 7 - line 120, column 31: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecMaybe"] = monadRecMaybe;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify"] = modify;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 44, column 3 - line 44, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                  var v1 = k(a);
                  return v1;
              })(function ($103) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($103));
              }));
          };
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 88, column 9 - line 90, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 84, column 5 - line 90, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["hush"] = hush;
})(PS["Control.Error.Util"] = PS["Control.Error.Util"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEff = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($69) {
          return mapReaderT(Data_Functor.map(dictFunctor)($69));
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, function ($71) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($71)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadEffReader = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadReaderT(dictMonadEff.Monad0());
      }, function ($73) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($73));
      });
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, function ($76) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($76));
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffReader"] = monadEffReader;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($17) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($18));
                  })($17));
              };
          };
      };
  };
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              return function ($19) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function ($20) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($20));
                  })($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["parTraverse"] = parTraverse;
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence_"] = parSequence_;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Milliseconds = function (x) {
      return x;
  };
  exports["Milliseconds"] = Milliseconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };           
  var functorParAff = new Data_Functor.Functor($foreign._parAffMap);
  var functorAff = new Data_Functor.Functor($foreign._map);
  var forkAff = $foreign._fork(true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 402, column 21 - line 404, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 397, column 20 - line 401, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 392, column 12 - line 394, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = function ($49) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(launchAff($49));
  };                                 
  var delay = function (v) {
      return $foreign._delay(Data_Either.Right.create, v);
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign._parAffApply);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, $foreign._liftEff);
  var effCanceler = function ($50) {
      return Canceler(Data_Function["const"](Control_Monad_Eff_Class.liftEff(monadEffAff)($50)));
  };
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(effCanceler)(v.join(k));
      });
  };
  var liftEff$prime = function ($51) {
      return Control_Monad_Eff_Class.liftEff(monadEffAff)(Control_Monad_Eff_Unsafe.unsafeCoerceEff($51));
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign._sequential);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($54) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($54));
  });
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign._parAffAlt);
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadThrowAff)(Control_Monad_Eff_Exception.error("Always fails")));
  var plusParAff = new Control_Plus.Plus(function () {
      return altParAff;
  }, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["forkAff"] = forkAff;
  exports["liftEff'"] = liftEff$prime;
  exports["attempt"] = attempt;
  exports["delay"] = delay;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effCanceler"] = effCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffAff"] = monadEffAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["altParAff"] = altParAff;
  exports["plusParAff"] = plusParAff;
  exports["parallelAff"] = parallelAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* globals exports, setTimeout */
  /* jshint -W097 */

  "use strict";

  var AVar = function () {
    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      /* jshint -W084 */
      while (1) {
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) {
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) {
            runEff(r(value));
          }
          while (t = takeHead(ts)) {
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      /* jshint +W084 */

      avar.draining = false;
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.makeVar = function (value) {
    return function () {
      return new AVar(value);
    };
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var putVar = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign._putVar(ffiUtil, value, avar, cb);
          };
      };
  };
  var takeVar = function (avar) {
      return function (cb) {
          return $foreign._takeVar(ffiUtil, avar, cb);
      };
  };
  exports["Killed"] = Killed;
  exports["Filled"] = Filled;
  exports["Empty"] = Empty;
  exports["takeVar"] = takeVar;
  exports["putVar"] = putVar;
  exports["makeVar"] = $foreign.makeVar;
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var takeVar = function (avar) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v = Control_Monad_Eff_AVar.takeVar(avar)(k)();
              return Control_Monad_Aff.effCanceler(v);
          };
      });
  };
  var putVar = function (value) {
      return function (avar) {
          return Control_Monad_Aff.makeAff(function (k) {
              return function __do() {
                  var v = Control_Monad_Eff_AVar.putVar(value)(avar)(k)();
                  return Control_Monad_Aff.effCanceler(v);
              };
          });
      };
  };
  var makeVar = function ($10) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.makeVar($10));
  };
  exports["makeVar"] = makeVar;
  exports["takeVar"] = takeVar;
  exports["putVar"] = putVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];        
  var MonadAff = function (MonadEff0, liftAff) {
      this.MonadEff0 = MonadEff0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Control_Monad_Aff.monadEffAff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffReader = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Reader_Trans.monadEffReader(dictMonadAff.MonadEff0());
      }, function ($15) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEff0()).Monad0())(liftAff(dictMonadAff)($15));
      });
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffReader"] = monadAffReader;
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var fromEffFnAff = function (v) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = Control_Monad_Eff_Uncurried.runEffFn2(v)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($4) {
                  return k(Data_Either.Left.create($4));
              }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($5) {
                  return k(Data_Either.Right.create($5));
              }))();
              return function (e) {
                  return Control_Monad_Aff.makeAff(function (k2) {
                      return function __do() {
                          Control_Monad_Eff_Uncurried.runEffFn3(v1)(e)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($6) {
                              return k2(Data_Either.Left.create($6));
                          }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($7) {
                              return k2(Data_Either.Right.create($7));
                          }))();
                          return Control_Monad_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffFnAff"] = fromEffFnAff;
})(PS["Control.Monad.Aff.Compat"] = PS["Control.Monad.Aff.Compat"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Prelude = PS["Prelude"];
  var warn = function ($5) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.warn($5));
  };
  var log = function ($7) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log($7));
  };
  var error = function ($11) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.error($11));
  };
  exports["log"] = log;
  exports["warn"] = warn;
  exports["error"] = error;
})(PS["Control.Monad.Aff.Console"] = PS["Control.Monad.Aff.Console"] || {});
(function(exports) {
    "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.DateTime.Instant"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Now"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_DateTime_Locale = PS["Data.DateTime.Locale"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];
  exports["now"] = $foreign.now;
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
  exports["withExcept"] = withExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {// module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;

  exports.log = Math.log;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["ceil"] = $foreign.ceil;
  exports["floor"] = $foreign.floor;
  exports["log"] = $foreign.log;
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 64, column 1 - line 64, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };                                                   
  var decimal = 10;
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };                        
  var binary = 2;
  exports["fromNumber"] = fromNumber;
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["binary"] = binary;
  exports["decimal"] = decimal;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["even"] = even;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["pow"] = $foreign.pow;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $9 = i <= 0;
                  if ($9) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  }; 
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 120, column 1 - line 120, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($168) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($168));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var Pattern = function (x) {
      return x;
  };
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  }; 
  var $$null = function (s) {
      return s === "";
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);                                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["Pattern"] = Pattern;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["null"] = $$null;
  exports["uncons"] = uncons;
  exports["stripPrefix"] = stripPrefix;
  exports["newtypePattern"] = newtypePattern;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["split"] = $foreign.split;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 64, column 1 - line 64, column 47: " + [ v.constructor.name ]);
  });
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Data.Foreign line 145, column 1 - line 145, column 42: " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($122) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($122));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Promise"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Control_Monad_Eff_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.id(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Foreign.unsafeReadTagged("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Monad_Eff_Exception.error)(Data_Foreign.readString(fn)))));
  };
  var toAff = function (p) {
      return Control_Monad_Aff.makeAff(function (cb) {
          return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(Data_Monoid.mempty(Control_Monad_Aff.monoidCanceler))($foreign.thenImpl(p)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($1) {
              return cb(Data_Either.Left.create(coerce($1)));
          }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($2) {
              return cb(Data_Either.Right.create($2));
          })));
      });
  };
  exports["toAff"] = toAff;
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 698, column 15 - line 703, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.fromArray = function (octets) {
    return function() {
      return new Buffer(octets);
    };
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return function() {
        return new Buffer(str, encoding);
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };

  exports.toArray = function (buff) {
    return function() {
      var json = buff.toJSON()
      return json.data || json;
    };
  };

  exports.size = function (buff) {
    return function() {
      return buff.length;
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 31, column 1 - line 31, column 37: " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Buffer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                                                           
  var fromString = function (str) {
      return function ($7) {
          return $foreign.fromStringImpl(str)(Node_Encoding.encodingToNode($7));
      };
  };
  exports["fromString"] = fromString;
  exports["toString"] = toString;
  exports["fromArray"] = $foreign.fromArray;
  exports["toArray"] = $foreign.toArray;
  exports["size"] = $foreign.size;
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Test_QuickCheck = PS["Test.QuickCheck"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Type_Proxy = PS["Type.Proxy"];
  var Canonical = function (canonical) {
      this.canonical = canonical;
  }; 
  var canonicalMod256 = new Canonical(function (v) {
      return function ($42) {
          return Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)((function (v1) {
              return v1 % 256;
          })($42));
      };
  });
  var canonical = function (dict) {
      return dict.canonical;
  };
  var runQuotient = function (dictCanonical) {
      return function (v) {
          return canonical(dictCanonical)(Type_Proxy["Proxy"].value)(v);
      };
  };
  exports["Canonical"] = Canonical;
  exports["canonical"] = canonical;
  exports["runQuotient"] = runQuotient;
  exports["canonicalMod256"] = canonicalMod256;
})(PS["Type.Quotient"] = PS["Type.Quotient"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.ByteString"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Leibniz = PS["Data.Leibniz"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Test_QuickCheck = PS["Test.QuickCheck"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Type_Quotient = PS["Type.Quotient"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ByteString = function (x) {
      return x;
  };
  var unsafeThaw = function (v) {
      return v;
  };
  var unsafeFreeze = ByteString;
  var unpack = function ($26) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.toArray(unsafeThaw($26)));
  };
  var toString = function (s) {
      return function (e) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.toString(e)(unsafeThaw(s)));
      };
  }; 
  var pack = function ($27) {
      return unsafeFreeze(Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.fromArray(Data_Functor.map(Data_Functor.functorArray)(Type_Quotient.runQuotient(Type_Quotient.canonicalMod256))($27))));
  };           
  var map = function (f) {
      return function ($31) {
          return pack(Data_Functor.map(Data_Functor.functorArray)(f)(unpack($31)));
      };
  };
  var length = function ($32) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.size(unsafeThaw($32)));
  };                                                                    
  var fromString = function (s) {
      return function (e) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeFreeze)(Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.catchException(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value)))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Node_Buffer.fromString(s)(e)))));
      };
  }; 
  var empty = pack([  ]);
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["empty"] = empty;
  exports["pack"] = pack;
  exports["unpack"] = unpack;
  exports["length"] = length;
  exports["map"] = map;
  exports["fromString"] = fromString;
  exports["toString"] = toString;
})(PS["Data.ByteString"] = PS["Data.ByteString"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode_Internal = PS["Data.Char.Unicode.Internal"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var isDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDigit(c) || ((function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
          return diff <= 5 && diff >= 0;
      })());
  };
  exports["isDigit"] = isDigit;
  exports["isHexDigit"] = isHexDigit;
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  var Decimal =require("decimal.js"); 

  Decimal.set({ precision: 30 });
  Decimal.set({ modulo: Decimal.EUCLID });

  exports.fromInt = function(x) {
    return new Decimal(x);
  };

  exports["fromString'"] = function(nothing) {
    return function(just) {
      return function(str) {
        try {
          return just(new Decimal(str));
        }
        catch (e) {
          return nothing;
        }
      };
    };
  };

  exports.toFixed = function(d) {
      return function(x) {
          return x.toFixed(d);
      }
  } 

  exports.dAdd = function(x) {
    return function(y) {
      return x.add(y);
    };
  };

  exports.dMul = function(x) {
    return function(y) {
      return x.mul(y);
    };
  };

  exports.dSub = function(x) {
    return function(y) {
      return x.minus(y);
    };
  };

  exports.dDiv = function(x) {
    return function(y) {
      return x.div(y);
    };
  };

  exports.pow = function(x) {
    return function(y) {
      return x.pow(y);
    };
  };

  exports.exp = function(x) {
    return x.exp();
  };

  exports.exp = function(x) {
    return x.exp();
  };

  exports.e = Decimal.exp(1.0);
})(PS["Data.Decimal"] = PS["Data.Decimal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Decimal"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var semiringDecimal = new Data_Semiring.Semiring($foreign.dAdd, $foreign.dMul, $foreign.fromInt(1), $foreign.fromInt(0));
  var ringDecimal = new Data_Ring.Ring(function () {
      return semiringDecimal;
  }, $foreign.dSub);
  var fromString = $foreign["fromString'"](Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var commutativeRingDecimal = new Data_CommutativeRing.CommutativeRing(function () {
      return ringDecimal;
  });
  var euclideanRingDecimal = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingDecimal;
  }, function (v) {
      return 1;
  }, $foreign.dDiv, function (v) {
      return function (v1) {
          return Data_Semiring.zero(semiringDecimal);
      };
  });
  exports["fromString"] = fromString;
  exports["semiringDecimal"] = semiringDecimal;
  exports["ringDecimal"] = ringDecimal;
  exports["commutativeRingDecimal"] = commutativeRingDecimal;
  exports["euclideanRingDecimal"] = euclideanRingDecimal;
  exports["fromInt"] = $foreign.fromInt;
  exports["toFixed"] = $foreign.toFixed;
  exports["pow"] = $foreign.pow;
})(PS["Data.Decimal"] = PS["Data.Decimal"] || {});
(function(exports) {exports['undefined'] = undefined;
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign.NullOrUndefined"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var readNullOrUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
      };
  };
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["undefined"] = $foreign["undefined"];
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                   
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              return Data_StrMap_ST.poke(v1)(k)(v)();
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign._foldM(Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var union = function (m) {
      return mutate(function (s) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m));
      });
  };
  exports["singleton"] = singleton;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["union"] = union;
  exports["foldM"] = foldM;
  exports["thawST"] = thawST;
  exports["pureST"] = pureST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Internal = PS["Data.Foreign.Internal"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var Decode = function (decode) {
      this.decode = decode;
  };
  var Encode = function (encode) {
      this.encode = encode;
  }; 
  var stringEncode = new Encode(Data_Foreign.toForeign);
  var stringDecode = new Decode(Data_Foreign.readString);
  var intEncode = new Encode(Data_Foreign.toForeign);
  var intDecode = new Decode(Data_Foreign.readInt);                                                                                    
  var encode = function (dict) {
      return dict.encode;
  };
  var maybeEncode = function (dictEncode) {
      return new Encode(Data_Maybe.maybe(Data_Foreign_NullOrUndefined["undefined"])(encode(dictEncode)));
  };
  var decode = function (dict) {
      return dict.decode;
  };
  var maybeDecode = function (dictDecode) {
      return new Decode(Data_Foreign_NullOrUndefined.readNullOrUndefined(decode(dictDecode)));
  };                                                 
  var booleanEncode = new Encode(Data_Foreign.toForeign);
  var arrayDecode = function (dictDecode) {
      return new Decode((function () {
          var readElement = function (i) {
              return function (value) {
                  return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtIndex.create(i))))(decode(dictDecode)(value));
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readArray)(readElements);
      })());
  };
  exports["decode"] = decode;
  exports["encode"] = encode;
  exports["Decode"] = Decode;
  exports["Encode"] = Encode;
  exports["stringDecode"] = stringDecode;
  exports["intDecode"] = intDecode;
  exports["arrayDecode"] = arrayDecode;
  exports["maybeDecode"] = maybeDecode;
  exports["stringEncode"] = stringEncode;
  exports["booleanEncode"] = booleanEncode;
  exports["intEncode"] = intEncode;
  exports["maybeEncode"] = maybeEncode;
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  exports["TaggedObject"] = TaggedObject;
})(PS["Data.Foreign.Generic.Types"] = PS["Data.Foreign.Generic.Types"] || {});
(function(exports) {
    "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Prelude = PS["Prelude"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  var index = function (dict) {
      return dict.index;
  }; 
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                             
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["readProp"] = readProp;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];        
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Field = function (x) {
      return x;
  };
  var Constructor = function (x) {
      return x;
  };
  var Argument = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
  exports["Argument"] = Argument;
  exports["Field"] = Field;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Foreign_Generic_Types = PS["Data.Foreign.Generic.Types"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var GenericDecode = function (decodeOpts) {
      this.decodeOpts = decodeOpts;
  };
  var GenericEncode = function (encodeOpts) {
      this.encodeOpts = encodeOpts;
  };
  var GenericDecodeArgs = function (decodeArgs) {
      this.decodeArgs = decodeArgs;
  };
  var GenericEncodeArgs = function (encodeArgs) {
      this.encodeArgs = encodeArgs;
  };
  var GenericDecodeFields = function (decodeFields) {
      this.decodeFields = decodeFields;
  };
  var GenericEncodeFields = function (encodeFields) {
      this.encodeFields = encodeFields;
  };
  var GenericCountArgs = function (countArgs) {
      this.countArgs = countArgs;
  };
  var genericEncodeFieldsField = function (dictIsSymbol) {
      return function (dictEncode) {
          return new GenericEncodeFields(function (opts) {
              return function (v) {
                  var name = opts.fieldTransform(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value));
                  return Data_StrMap.singleton(name)(Data_Foreign_Class.encode(dictEncode)(v));
              };
          });
      };
  };
  var genericEncodeArgsNoArguments = new GenericEncodeArgs(function (v) {
      return Data_Monoid.mempty(Data_Monoid.monoidFn(Data_List_Types.monoidList));
  });
  var genericEncodeArgsArgument = function (dictEncode) {
      return new GenericEncodeArgs(function (v) {
          return function (v1) {
              return Data_List.singleton(Data_Foreign_Class.encode(dictEncode)(v1));
          };
      });
  }; 
  var genericDecodeFieldsField = function (dictIsSymbol) {
      return function (dictDecode) {
          return new GenericDecodeFields(function (opts) {
              return function (x) {
                  var name = opts.fieldTransform(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value));
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Field)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.index(Data_Foreign_Index.indexString)(x)(name))(function ($158) {
                      return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtProperty.create(name))))(Data_Foreign_Class.decode(dictDecode)($158));
                  }));
              };
          });
      };
  };
  var genericDecodeArgsNoArguments = new GenericDecodeArgs(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_List_Types.Nil) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      result: Data_Generic_Rep.NoArguments.value,
                      rest: Data_List_Types.Nil.value,
                      next: v1
                  });
              };
              return Data_Foreign.fail(new Data_Foreign.ForeignError("Too many constructor arguments"));
          };
      };
  });
  var genericDecodeArgsArgument = function (dictDecode) {
      return new GenericDecodeArgs(function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtIndex.create(v1))))(Data_Foreign_Class.decode(dictDecode)(v2.value0)))(function (v3) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                              result: v3,
                              rest: v2.value1,
                              next: v1 + 1 | 0
                          });
                      });
                  };
                  return Data_Foreign.fail(new Data_Foreign.ForeignError("Not enough constructor arguments"));
              };
          };
      });
  };
  var genericCountArgsRec = new GenericCountArgs(function (v) {
      return new Data_Either.Right(1);
  });
  var genericCountArgsNoArguments = new GenericCountArgs(function (v) {
      return new Data_Either.Left(Data_Generic_Rep.NoArguments.value);
  });
  var genericCountArgsArgument = new GenericCountArgs(function (v) {
      return new Data_Either.Right(1);
  });
  var encodeOpts = function (dict) {
      return dict.encodeOpts;
  }; 
  var genericEncodeSum = function (dictGenericEncode) {
      return function (dictGenericEncode1) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return encodeOpts(dictGenericEncode)((function () {
                          var $83 = {};
                          for (var $84 in opts) {
                              if ({}.hasOwnProperty.call(opts, $84)) {
                                  $83[$84] = opts[$84];
                              };
                          };
                          $83.unwrapSingleConstructors = false;
                          return $83;
                      })())(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return encodeOpts(dictGenericEncode1)((function () {
                          var $87 = {};
                          for (var $88 in opts) {
                              if ({}.hasOwnProperty.call(opts, $88)) {
                                  $87[$88] = opts[$88];
                              };
                          };
                          $87.unwrapSingleConstructors = false;
                          return $87;
                      })())(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foreign.Generic.Class line 118, column 1 - line 120, column 29: " + [ opts.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var encodeFields = function (dict) {
      return dict.encodeFields;
  };
  var genericEncodeArgsRec = function (dictGenericEncodeFields) {
      return new GenericEncodeArgs(function (opts) {
          return function (v) {
              return Data_List.singleton(Data_Foreign.toForeign(encodeFields(dictGenericEncodeFields)(opts)(v)));
          };
      });
  };
  var genericEncodeFieldsProduct = function (dictGenericEncodeFields) {
      return function (dictGenericEncodeFields1) {
          return new GenericEncodeFields(function (opts) {
              return function (v) {
                  return Data_StrMap.union(encodeFields(dictGenericEncodeFields)(opts)(v.value0))(encodeFields(dictGenericEncodeFields1)(opts)(v.value1));
              };
          });
      };
  };
  var encodeArgs = function (dict) {
      return dict.encodeArgs;
  };
  var genericEncodeConstructor = function (dictIsSymbol) {
      return function (dictGenericEncodeArgs) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  var unwrapArguments = function (v1) {
                      if (v1.length === 0) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v1.length === 1 && opts.unwrapSingleArguments) {
                          return new Data_Maybe.Just(v1[0]);
                      };
                      return new Data_Maybe.Just(Data_Foreign.toForeign(v1));
                  };
                  var encodeArgsArray = function ($159) {
                      return unwrapArguments(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(encodeArgs(dictGenericEncodeArgs)(opts)($159)));
                  };
                  var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  if (opts.unwrapSingleConstructors) {
                      return Data_Maybe.maybe(Data_Foreign.toForeign({}))(Data_Foreign.toForeign)(encodeArgsArray(v));
                  };
                  return Data_Foreign.toForeign(Data_StrMap.union(Data_StrMap.singleton(opts.sumEncoding.value0.tagFieldName)(Data_Foreign.toForeign(opts.sumEncoding.value0.constructorTagTransform(ctorName))))(Data_Maybe.maybe(Data_StrMap.empty)(Data_StrMap.singleton(opts.sumEncoding.value0.contentsFieldName))(encodeArgsArray(v))));
              };
          });
      };
  };
  var decodeOpts = function (dict) {
      return dict.decodeOpts;
  };
  var genericDecodeSum = function (dictGenericDecode) {
      return function (dictGenericDecode1) {
          return new GenericDecode(function (opts) {
              return function (f) {
                  var opts$prime = (function () {
                      var $111 = {};
                      for (var $112 in opts) {
                          if ({}.hasOwnProperty.call(opts, $112)) {
                              $111[$112] = opts[$112];
                          };
                      };
                      $111.unwrapSingleConstructors = false;
                      return $111;
                  })();
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inl.create)(decodeOpts(dictGenericDecode)(opts$prime)(f)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inr.create)(decodeOpts(dictGenericDecode1)(opts$prime)(f)));
              };
          });
      };
  };
  var decodeFields = function (dict) {
      return dict.decodeFields;
  };
  var genericDecodeArgsRec = function (dictGenericDecodeFields) {
      return new GenericDecodeArgs(function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtIndex.create(v1))))(decodeFields(dictGenericDecodeFields)(v)(v2.value0)))(function (v3) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                              result: v3,
                              rest: v2.value1,
                              next: v1 + 1 | 0
                          });
                      });
                  };
                  return Data_Foreign.fail(new Data_Foreign.ForeignError("Not enough constructor arguments"));
              };
          };
      });
  };
  var genericDecodeFieldsProduct = function (dictGenericDecodeFields) {
      return function (dictGenericDecodeFields1) {
          return new GenericDecodeFields(function (opts) {
              return function (x) {
                  return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Product.create)(decodeFields(dictGenericDecodeFields)(opts)(x)))(decodeFields(dictGenericDecodeFields1)(opts)(x));
              };
          });
      };
  };
  var decodeArgs = function (dict) {
      return dict.decodeArgs;
  };
  var countArgs = function (dict) {
      return dict.countArgs;
  };
  var genericDecodeConstructor = function (dictIsSymbol) {
      return function (dictGenericDecodeArgs) {
          return function (dictGenericCountArgs) {
              return new GenericDecode(function (opts) {
                  return function (f) {
                      var numArgs = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
                      var readArguments = function (args) {
                          if (numArgs instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(numArgs.value0);
                          };
                          if (numArgs instanceof Data_Either.Right && (numArgs.value0 === 1 && opts.unwrapSingleArguments)) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.singleton(args)))(function (v) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Data_Foreign.fail(new Data_Foreign.ForeignError("Expected a single argument"))))(function () {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                  });
                              });
                          };
                          if (numArgs instanceof Data_Either.Right) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readArray(args))(function (v) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.fromFoldable(Data_Foldable.foldableArray)(v)))(function (v1) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v1.rest))(Data_Foreign.fail(new Data_Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showInt)(numArgs.value0) + " constructor arguments")))))(function () {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v1.result);
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Data.Foreign.Generic.Class line 74, column 9 - line 86, column 24: " + [ numArgs.constructor.name ]);
                      };
                      var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      if (opts.unwrapSingleConstructors) {
                          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(readArguments(f));
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.tagFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.index(Data_Foreign_Index.indexString)(f)(opts.sumEncoding.value0.tagFieldName))(Data_Foreign.readString))(function (v) {
                          var expected = opts.sumEncoding.value0.constructorTagTransform(ctorName);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v === expected)(Data_Foreign.fail(new Data_Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showString)(expected) + " tag")))))(function () {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v);
                          });
                      })))(function (v) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.contentsFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.index(Data_Foreign_Index.indexString)(f)(opts.sumEncoding.value0.contentsFieldName))(readArguments)))(function (v1) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v1);
                          });
                      });
                  };
              });
          };
      };
  };
  exports["countArgs"] = countArgs;
  exports["decodeArgs"] = decodeArgs;
  exports["decodeFields"] = decodeFields;
  exports["decodeOpts"] = decodeOpts;
  exports["encodeArgs"] = encodeArgs;
  exports["encodeFields"] = encodeFields;
  exports["encodeOpts"] = encodeOpts;
  exports["GenericDecode"] = GenericDecode;
  exports["GenericEncode"] = GenericEncode;
  exports["GenericDecodeArgs"] = GenericDecodeArgs;
  exports["GenericEncodeArgs"] = GenericEncodeArgs;
  exports["GenericDecodeFields"] = GenericDecodeFields;
  exports["GenericEncodeFields"] = GenericEncodeFields;
  exports["GenericCountArgs"] = GenericCountArgs;
  exports["genericDecodeConstructor"] = genericDecodeConstructor;
  exports["genericEncodeConstructor"] = genericEncodeConstructor;
  exports["genericDecodeSum"] = genericDecodeSum;
  exports["genericEncodeSum"] = genericEncodeSum;
  exports["genericDecodeArgsNoArguments"] = genericDecodeArgsNoArguments;
  exports["genericEncodeArgsNoArguments"] = genericEncodeArgsNoArguments;
  exports["genericDecodeArgsArgument"] = genericDecodeArgsArgument;
  exports["genericEncodeArgsArgument"] = genericEncodeArgsArgument;
  exports["genericDecodeArgsRec"] = genericDecodeArgsRec;
  exports["genericEncodeArgsRec"] = genericEncodeArgsRec;
  exports["genericDecodeFieldsField"] = genericDecodeFieldsField;
  exports["genericEncodeFieldsField"] = genericEncodeFieldsField;
  exports["genericDecodeFieldsProduct"] = genericDecodeFieldsProduct;
  exports["genericEncodeFieldsProduct"] = genericEncodeFieldsProduct;
  exports["genericCountArgsNoArguments"] = genericCountArgsNoArguments;
  exports["genericCountArgsArgument"] = genericCountArgsArgument;
  exports["genericCountArgsRec"] = genericCountArgsRec;
})(PS["Data.Foreign.Generic.Class"] = PS["Data.Foreign.Generic.Class"] || {});
(function(exports) {
    "use strict";

  exports.parseJSONImpl = function (str) {
    return JSON.parse(str);
  };
})(PS["Data.Foreign.JSON"] = PS["Data.Foreign.JSON"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign.JSON"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];        
  var parseJSON = function ($0) {
      return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function ($1) {
          return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.JSONError.create(Control_Monad_Eff_Exception.message($1)));
      })(Control_Monad_Eff.runPure(Control_Monad_Eff_Exception["try"](Control_Monad_Eff_Uncurried.runEffFn1($foreign.parseJSONImpl)($0))))));
  };
  exports["parseJSON"] = parseJSON;
})(PS["Data.Foreign.JSON"] = PS["Data.Foreign.JSON"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  // module Global.Unsafe

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Foreign_Generic_Class = PS["Data.Foreign.Generic.Class"];
  var Data_Foreign_Generic_Types = PS["Data.Foreign.Generic.Types"];
  var Data_Foreign_JSON = PS["Data.Foreign.JSON"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Identity = PS["Data.Identity"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Prelude = PS["Prelude"];        
  var genericEncode = function (dictGeneric) {
      return function (dictGenericEncode) {
          return function (opts) {
              return function ($10) {
                  return Data_Foreign_Generic_Class.encodeOpts(dictGenericEncode)(opts)(Data_Generic_Rep.from(dictGeneric)($10));
              };
          };
      };
  };
  var genericEncodeJSON = function (dictGeneric) {
      return function (dictGenericEncode) {
          return function (opts) {
              return function ($11) {
                  return Global_Unsafe.unsafeStringify(genericEncode(dictGeneric)(dictGenericEncode)(opts)($11));
              };
          };
      };
  };
  var genericDecode = function (dictGeneric) {
      return function (dictGenericDecode) {
          return function (opts) {
              return function ($12) {
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.to(dictGeneric))(Data_Foreign_Generic_Class.decodeOpts(dictGenericDecode)(opts)($12));
              };
          };
      };
  };
  var genericDecodeJSON = function (dictGeneric) {
      return function (dictGenericDecode) {
          return function (opts) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(genericDecode(dictGeneric)(dictGenericDecode)(opts))(Data_Foreign_JSON.parseJSON);
          };
      };
  };
  var defaultOptions = {
      sumEncoding: new Data_Foreign_Generic_Types.TaggedObject({
          tagFieldName: "tag",
          contentsFieldName: "contents",
          constructorTagTransform: Control_Category.id(Control_Category.categoryFn)
      }),
      unwrapSingleConstructors: false,
      unwrapSingleArguments: true,
      fieldTransform: Control_Category.id(Control_Category.categoryFn)
  };
  exports["defaultOptions"] = defaultOptions;
  exports["genericDecode"] = genericDecode;
  exports["genericEncode"] = genericEncode;
  exports["genericDecodeJSON"] = genericDecodeJSON;
  exports["genericEncodeJSON"] = genericEncodeJSON;
})(PS["Data.Foreign.Generic"] = PS["Data.Foreign.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var untagged = function (v) {
      return v;
  };                                                        
  var tagged = function (a) {
      return a;
  };
  exports["tagged"] = tagged;
  exports["untagged"] = untagged;
})(PS["Data.Functor.Tagged"] = PS["Data.Functor.Tagged"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];        
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShowFields = function (genericShowFields) {
      this.genericShowFields = genericShowFields;
  }; 
  var genericShowFieldsField = function (dictShow) {
      return function (dictIsSymbol) {
          return new GenericShowFields(function (v) {
              return [ Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value) + (": " + Data_Show.show(dictShow)(v)) ];
          });
      };
  };
  var genericShowFields = function (dict) {
      return dict.genericShowFields;
  };
  var genericShowFieldsProduct = function (dictGenericShowFields) {
      return function (dictGenericShowFields1) {
          return new GenericShowFields(function (v) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowFields(dictGenericShowFields)(v.value0))(genericShowFields(dictGenericShowFields1)(v.value1));
          });
      };
  };
  var genericShowArgsRec = function (dictGenericShowFields) {
      return new GenericShowArgs(function (v) {
          return [ "{ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(genericShowFields(dictGenericShowFields)(v)) + " }") ];
      });
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show line 31, column 1 - line 31, column 83: " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["GenericShow"] = GenericShow;
  exports["genericShow"] = genericShow;
  exports["GenericShowArgs"] = GenericShowArgs;
  exports["genericShowArgs"] = genericShowArgs;
  exports["GenericShowFields"] = GenericShowFields;
  exports["genericShowFields"] = genericShowFields;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowFieldsProduct"] = genericShowFieldsProduct;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
  exports["genericShowArgsRec"] = genericShowArgsRec;
  exports["genericShowFieldsField"] = genericShowFieldsField;
})(PS["Data.Generic.Rep.Show"] = PS["Data.Generic.Rep.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 42, column 1 - line 42, column 35: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["print"] = print;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["strongForget"] = strongForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.id(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($184) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($184));
  };      
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($185) {
          return step(f($185));
      }));
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 122, column 7 - line 124, column 40: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 146, column 28 - line 148, column 39: " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["newtypeList"] = newtypeList;
  exports["lazyList"] = lazyList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 427, column 3 - line 427, column 15: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($252) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($252)));
      };
  };
  exports["filter"] = filter;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 590, column 1 - line 590, column 40: " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map line 617, column 1 - line 617, column 35: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };                                                                
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                      };
                      if (v.value0 instanceof Three) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                      };
                      throw new Error("Failed pattern match at Data.Map line 561, column 18 - line 566, column 77: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 560, column 3 - line 560, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map line 195, column 5 - line 195, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 584, column 1 - line 584, column 38: " + [ v.constructor.name ]);
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 413, column 3 - line 418, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 410, column 1 - line 410, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map line 449, column 5 - line 454, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map line 446, column 3 - line 446, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map line 429, column 3 - line 429, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar57) {
                              return $dollar57;
                          };
                      };
                      return __unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 499, column 9 - line 516, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 496, column 5 - line 516, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar59) {
                          return $dollar59;
                      };
                  };
                  return __unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 528, column 5 - line 532, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar61) {
                      return $dollar61;
                  };
              };
              return __unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 519, column 33 - line 523, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 469, column 34 - line 492, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          return function ($750) {
              return fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList)(Data_List_Lazy.filter(Data_Tuple.uncurry(predicate))(toUnfoldable(Data_List_Lazy_Types.unfoldableList)($750)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($751) {
              return Data_Function["const"](predicate($751));
          });
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 537, column 15 - line 539, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($753) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($753));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["size"] = size;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["foldableMap"] = foldableMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var LeftModule = function (Ring0, maddL, mmulL, msubL, mzeroL) {
      this.Ring0 = Ring0;
      this.maddL = maddL;
      this.mmulL = mmulL;
      this.msubL = msubL;
      this.mzeroL = mzeroL;
  };
  var RightModule = function (Ring0, maddR, mmulR, msubR, mzeroR) {
      this.Ring0 = Ring0;
      this.maddR = maddR;
      this.mmulR = mmulR;
      this.msubR = msubR;
      this.mzeroR = mzeroR;
  };
  var mzeroR = function (dict) {
      return dict.mzeroR;
  };
  var mzeroL = function (dict) {
      return dict.mzeroL;
  };
  var msubR = function (dict) {
      return dict.msubR;
  };
  var msubL = function (dict) {
      return dict.msubL;
  };
  var mmulR = function (dict) {
      return dict.mmulR;
  };
  var mmulL = function (dict) {
      return dict.mmulL;
  };
  var maddR = function (dict) {
      return dict.maddR;
  };
  var maddL = function (dict) {
      return dict.maddL;
  };
  exports["LeftModule"] = LeftModule;
  exports["mzeroL"] = mzeroL;
  exports["maddL"] = maddL;
  exports["msubL"] = msubL;
  exports["mmulL"] = mmulL;
  exports["RightModule"] = RightModule;
  exports["mzeroR"] = mzeroR;
  exports["maddR"] = maddR;
  exports["msubR"] = msubR;
  exports["mmulR"] = mmulR;
})(PS["Data.Module"] = PS["Data.Module"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetFn = function(label, rec) {
    return rec[label];
  };

  exports.unsafeSetFn = function(label, value, rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    copy[label] = value;
    return copy;
  };

  exports.unsafeDeleteFn = function(label, rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Record.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  exports["unsafeGetFn"] = $foreign.unsafeGetFn;
  exports["unsafeSetFn"] = $foreign.unsafeSetFn;
  exports["unsafeDeleteFn"] = $foreign.unsafeDeleteFn;
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  var RowLacking = {};
  var RowLacks = {};
  var rowLacks = function (dictRowCons) {
      return function (dictUnion) {
          return function (dictRowCons1) {
              return function (dictRowLacking) {
                  return RowLacks;
              };
          };
      };
  };
  var rowLacking = RowLacking;
  exports["RowLacks"] = RowLacks;
  exports["RowLacking"] = RowLacking;
  exports["RLProxy"] = RLProxy;
  exports["rowLacking"] = rowLacking;
  exports["rowLacks"] = rowLacks;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var set = function (dictIsSymbol) {
      return function (dictRowCons) {
          return function (dictRowCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Data_Record_Unsafe.unsafeSetFn(Data_Symbol.reflectSymbol(dictIsSymbol)(l), b, r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictRowCons) {
          return function (l) {
              return function (r) {
                  return Data_Record_Unsafe.unsafeGetFn(Data_Symbol.reflectSymbol(dictIsSymbol)(l), r);
              };
          };
      };
  };
  var modify = function (dictIsSymbol) {
      return function (dictRowCons) {
          return function (dictRowCons1) {
              return function (l) {
                  return function (f) {
                      return function (r) {
                          return set(dictIsSymbol)(dictRowCons)(dictRowCons1)(l)(f(get(dictIsSymbol)(dictRowCons)(l)(r)))(r);
                      };
                  };
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictRowLacks) {
          return function (dictRowCons) {
              return function (l) {
                  return function (r) {
                      return Data_Record_Unsafe.unsafeDeleteFn(Data_Symbol.reflectSymbol(dictIsSymbol)(l), r);
                  };
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["modify"] = modify;
  exports["delete"] = $$delete;
})(PS["Data.Record"] = PS["Data.Record"] || {});
(function(exports) {
    "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Data.Record.Builder"] = PS["Data.Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Record.Builder"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function (dictRowCons) {
      return function (dictRowLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS["Data.Record.Builder"] = PS["Data.Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Record = PS["Data.Record"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];        
  var ShowRowList = function (showRowList) {
      this.showRowList = showRowList;
  };
  var showRowListNil = new ShowRowList(function (v) {
      return function (v1) {
          return Data_List_Lazy_Types.nil;
      };
  });
  var showRowList = function (dict) {
      return dict.showRowList;
  };
  var showRowListConsShow = function (dictShow) {
      return function (dictShowRowList) {
          return function (dictRowCons) {
              return function (dictRowLacks) {
                  return function (dictRowToList) {
                      return function (dictIsSymbol) {
                          return new ShowRowList(function (v) {
                              return function (rec) {
                                  var rest = showRowList(dictShowRowList)(Type_Row.RLProxy.value)(Data_Record["delete"](dictIsSymbol)(dictRowLacks)(dictRowCons)(Data_Symbol.SProxy.value)(rec));
                                  var val = Data_Record.get(dictIsSymbol)(dictRowCons)(Data_Symbol.SProxy.value)(rec);
                                  return Data_List_Lazy_Types.cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value) + (": " + Data_Show.show(dictShow)(val)))(rest);
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRowList) {
          return function (rec) {
              var rowListStrs = showRowList(dictShowRowList)(Type_Row.RLProxy.value)(rec);
              return "{ " + (Data_Foldable.intercalate(Data_List_Lazy_Types.foldableList)(Data_Monoid.monoidString)(", ")(rowListStrs) + " }");
          };
      };
  };
  var showRowListConsRecord = function (dictRowToList) {
      return function (dictShowRowList) {
          return function (dictShowRowList1) {
              return function (dictRowCons) {
                  return function (dictRowLacks) {
                      return function (dictRowToList1) {
                          return function (dictIsSymbol) {
                              return new ShowRowList(function (v) {
                                  return function (rec) {
                                      var rest = showRowList(dictShowRowList1)(Type_Row.RLProxy.value)(Data_Record["delete"](dictIsSymbol)(dictRowLacks)(dictRowCons)(Data_Symbol.SProxy.value)(rec));
                                      var val = Data_Record.get(dictIsSymbol)(dictRowCons)(Data_Symbol.SProxy.value)(rec);
                                      return Data_List_Lazy_Types.cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value) + (": " + showRecord(dictRowToList)(dictShowRowList)(val)))(rest);
                                  };
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  exports["ShowRowList"] = ShowRowList;
  exports["showRowList"] = showRowList;
  exports["showRecord"] = showRecord;
  exports["showRowListNil"] = showRowListNil;
  exports["showRowListConsRecord"] = showRowListConsRecord;
  exports["showRowListConsShow"] = showRowListConsShow;
})(PS["Data.Record.ShowRecord"] = PS["Data.Record.ShowRecord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var $$Set = (function () {
      function $$Set(value0) {
          this.value0 = value0;
      };
      $$Set.create = function (value0) {
          return new $$Set(value0);
      };
      return $$Set;
  })();
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return new $$Set(Data_Map.union(dictOrd)(v.value0)(v1.value0));
          };
      };
  };
  var toList = function (v) {
      return Data_Map.keys(v.value0);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($71) {
          return Data_List.toUnfoldable(dictUnfoldable)(toList($71));
      };
  };
  var size = function (v) {
      return Data_Map.size(v.value0);
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map.member(dictOrd)(a)(v.value0);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map.insert(dictOrd)(a)(Data_Unit.unit)(v.value0));
          };
      };
  }; 
  var empty = new $$Set(Data_Map.empty);
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["size"] = size;
  exports["union"] = union;
  exports["semigroupSet"] = semigroupSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Char = PS["Data.Char"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var cons = function ($55) {
      return Data_Semigroup.append(Data_Semigroup.semigroupString)(Data_String.singleton($55));
  };
  var replicate = (function () {
      var replicate$prime = function ($copy_acc) {
          return function ($copy_n) {
              return function ($copy_c) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_n = $copy_n;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, n, c) {
                      if (n <= 0) {
                          $tco_done = true;
                          return acc;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = cons(c)(acc);
                          $tco_var_n = n - 1 | 0;
                          $copy_c = c;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.String.Yarn line 196, column 5 - line 197, column 71: " + [ acc.constructor.name, n.constructor.name, c.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_n, $copy_c);
                  };
                  return $tco_result;
              };
          };
      };
      return replicate$prime("");
  })();
  exports["cons"] = cons;
  exports["replicate"] = replicate;
})(PS["Data.String.Yarn"] = PS["Data.String.Yarn"] || {});
(function(exports) {
    "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = req === undefined ? undefined : req("util");

  exports.traceAny = function () {
    return function (x) {
      return function (k) {
        // node only recurses two levels into an object before printing
        // "[object]" for further objects when using console.log()
        if (util !== undefined) {
          console.log(util.inspect(x, { depth: null, colors: true }));
        } else {
          console.log(x);
        }
        return k({});
      };
    };
  };
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Debug.Trace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DebugWarning = {};
  var warn = function (dictWarn) {
      return DebugWarning;
  };
  var spy = function (dictDebugWarning) {
      return function (a) {
          return $foreign.traceAny(dictDebugWarning)(a)(function (v) {
              return a;
          });
      };
  };
  exports["DebugWarning"] = DebugWarning;
  exports["spy"] = spy;
  exports["warn"] = warn;
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
    "use strict";


  exports.getImpl = function(ipfs, path) {
      // extract the data at the end so we're not returning a Block object
      return ipfs.block.get(path).then(function(b) { return {data: b.data, cid: b.cid.toBaseEncodedString('base58btc')}; });
  };
})(PS["IPFS.Block"] = PS["IPFS.Block"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IPFS.Block"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Promise = PS["Control.Promise"];
  var IPFS = PS["IPFS"];
  var Node_Buffer = PS["Node.Buffer"];
  var Prelude = PS["Prelude"];
  var get = function (ipfs) {
      return function (cid) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Uncurried.runEffFn2($foreign.getImpl)(ipfs)(cid)))(Control_Promise.toAff);
      };
  };
  exports["get"] = get;
})(PS["IPFS.Block"] = PS["IPFS.Block"] || {});
(function(exports) {
    "use strict";
  var BigNumber =require("bn.js"); 

  //NOTE: According to the documentation, many binary operators can take a normal js Number
  //by suffixing the version for BN with 'n'.

  exports._intToBigNumber = function(value) {
    return new BigNumber(value.toString(10), 10);
  };

  exports._eqBigNumber = function(n) {
      return function(m) { return m.eq(n); };
  };

  exports._addBigNumber = function(n) {
      return function (m) { return n.add(m); };
  };

  exports._mulBigNumber = function(n) {
      return function (m) { return n.mul(m); };
  };

  exports._subBigNumber = function(n) {
      return function (m) { return n.sub(m); };
  };

  exports.comparedTo = function (a) {
    return function (b) {
      return a.cmp(b);
    };
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        return function (s) {
          var result;
          try {
              if (radix === 16) {
                if (s.indexOf('0x') === 0 || s.indexOf('-0x') === 0) {
                  result = new BigNumber(s.replace('0x',''), 16);
                } else {
                  result = new BigNumber(s, radix);
                }
              } else {
                result = new BigNumber(s, radix);
              }
          } catch (_) {
            return nothing;
          }
          return just(result);
        };
      };
    };
  };

  exports.toString = function (radix) {
    return function (bn) { return bn.toString(radix); };
  };

  exports.toTwosComplement = function (bn) {
    if (bn.ltn(0)) {
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).add(bn).addn(1);
    } else {
      return bn;
    }
  };

  exports.pow = function(n) {
      return function (m) {
          var exp = new BigNumber(m, 10);
          return n.pow(exp);
      };
  };

  exports.toNumber = function (n) {
      var newN = new BigNumber(n);
      return newN.toNumber();
  };
})(PS["Network.Ethereum.Core.BigNumber"] = PS["Network.Ethereum.Core.BigNumber"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Internal = PS["Data.Foreign.Internal"];
  var Data_Foreign_JSON = PS["Data.Foreign.JSON"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Record = PS["Data.Record"];
  var Data_Record_Builder = PS["Data.Record.Builder"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Variant = PS["Data.Variant"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];        
  var ReadForeign = function (readImpl) {
      this.readImpl = readImpl;
  };
  var ReadForeignFields = function (getFields) {
      this.getFields = getFields;
  };
  var readString = new ReadForeign(Data_Foreign.readString);
  var readInt = new ReadForeign(Data_Foreign.readInt);
  var readImpl = function (dict) {
      return dict.readImpl;
  };
  var readJSON$prime = function (dictReadForeign) {
      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Data_Foreign_JSON.parseJSON);
  };
  var readMaybe = function (dictReadForeign) {
      return new ReadForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(readImpl(dictReadForeign)));
  };
  var readForeign = new ReadForeign(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
  var readFieldsNil = new ReadForeignFields(function (v) {
      return function (v1) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.id(Data_Record_Builder.categoryBuilder));
      };
  });                                                   
  var readBoolean = new ReadForeign(Data_Foreign.readBoolean);
  var readArray = function (dictReadForeign) {
      return new ReadForeign(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign)))(Data_Foreign.readArray));
  };
  var read$prime = function (dictReadForeign) {
      return readImpl(dictReadForeign);
  }; 
  var getFields = function (dict) {
      return dict.getFields;
  };
  var readFieldsCons = function (dictIsSymbol) {
      return function (dictReadForeign) {
          return function (dictReadForeignFields) {
              return function (dictRowLacks) {
                  return function (dictRowCons) {
                      return new ReadForeignFields(function (v) {
                          return function (obj) {
                              var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var withExcept$prime = Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtProperty.create(name)));
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(withExcept$prime(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Data_Foreign_Index.readProp(name)(obj))))(function (v1) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(getFields(dictReadForeignFields)(Type_Row.RLProxy.value)(obj))(function (v2) {
                                      var first = Data_Record_Builder.insert(dictRowCons)(dictRowLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(v1);
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Semigroupoid.compose(Data_Record_Builder.semigroupoidBuilder)(first)(v2));
                                  });
                              });
                          };
                      });
                  };
              };
          };
      };
  };
  var readRecord = function (dictRowToList) {
      return function (dictReadForeignFields) {
          return new ReadForeign(function (o) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(getFields(dictReadForeignFields)(Type_Row.RLProxy.value)(o))(function (v) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Record_Builder.build(v)({}));
              });
          });
      };
  };
  exports["readJSON'"] = readJSON$prime;
  exports["read'"] = read$prime;
  exports["ReadForeign"] = ReadForeign;
  exports["readImpl"] = readImpl;
  exports["ReadForeignFields"] = ReadForeignFields;
  exports["getFields"] = getFields;
  exports["readForeign"] = readForeign;
  exports["readInt"] = readInt;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["readArray"] = readArray;
  exports["readMaybe"] = readMaybe;
  exports["readRecord"] = readRecord;
  exports["readFieldsCons"] = readFieldsCons;
  exports["readFieldsNil"] = readFieldsNil;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Core.BigNumber"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Module = PS["Data.Module"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Simple_JSON = PS["Simple.JSON"];        
  var Algebra = function (LeftModule2, RightModule3, Ring0, Ring1, embed) {
      this.LeftModule2 = LeftModule2;
      this.RightModule3 = RightModule3;
      this.Ring0 = Ring0;
      this.Ring1 = Ring1;
      this.embed = embed;
  };
  var unsafeToInt = function ($8) {
      return Data_Int.floor($foreign.toNumber($8));
  };
  var showBigNumber = new Data_Show.Show($foreign.toString(Data_Int.decimal));
  var parseBigNumber = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var eqBigNumber = new Data_Eq.Eq($foreign._eqBigNumber);
  var ordBigNumber = new Data_Ord.Ord(function () {
      return eqBigNumber;
  }, function (bn1) {
      return function (bn2) {
          var n = $foreign.comparedTo(bn1)(bn2);
          if (n === 0) {
              return Data_Ordering.EQ.value;
          };
          if (n === 1) {
              return Data_Ordering.GT.value;
          };
          return Data_Ordering.LT.value;
      };
  });
  var embedInt = $foreign._intToBigNumber;
  var semiringBigNumber = new Data_Semiring.Semiring($foreign._addBigNumber, $foreign._mulBigNumber, embedInt(1), embedInt(0));
  var ringBigNumber = new Data_Ring.Ring(function () {
      return semiringBigNumber;
  }, $foreign._subBigNumber);
  var embed = function (dict) {
      return dict.embed;
  };
  var bigNumberRModule = new Data_Module.RightModule(function () {
      return Data_Ring.ringInt;
  }, Data_Semiring.add(semiringBigNumber), function (a) {
      return function (b) {
          return Data_Semiring.mul(semiringBigNumber)(a)(embedInt(b));
      };
  }, Data_Ring.sub(ringBigNumber), embedInt(0));
  var bigNumberLModule = new Data_Module.LeftModule(function () {
      return Data_Ring.ringInt;
  }, Data_Semiring.add(semiringBigNumber), function (a) {
      return function (b) {
          return Data_Semiring.mul(semiringBigNumber)(embedInt(a))(b);
      };
  }, Data_Ring.sub(ringBigNumber), embedInt(0));
  var embedInt$prime = new Algebra(function () {
      return bigNumberLModule;
  }, function () {
      return bigNumberRModule;
  }, function () {
      return Data_Ring.ringInt;
  }, function () {
      return ringBigNumber;
  }, embedInt);
  var _encode = function ($9) {
      return "0x" + $foreign.toString(Data_Int.hexadecimal)($9);
  };
  var encodeBigNumber = new Data_Foreign_Class.Encode(function ($10) {
      return Data_Foreign_Class.encode(Data_Foreign_Class.stringEncode)(_encode($10));
  });
  var _decode = function (str) {
      var v = parseBigNumber(Data_Int.hexadecimal)(str);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Failed to parse as BigNumber: " + str);
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.BigNumber line 125, column 15 - line 127, column 20: " + [ v.constructor.name ]);
  };
  var decodeBigNumber = new Data_Foreign_Class.Decode(function (x) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readString(x))(function (v) {
          return Data_Either.either(function ($12) {
              return Data_Foreign.fail(Data_Foreign.ForeignError.create($12));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(_decode(v));
      });
  });
  exports["Algebra"] = Algebra;
  exports["embed"] = embed;
  exports["parseBigNumber"] = parseBigNumber;
  exports["unsafeToInt"] = unsafeToInt;
  exports["showBigNumber"] = showBigNumber;
  exports["eqBigNumber"] = eqBigNumber;
  exports["ordBigNumber"] = ordBigNumber;
  exports["semiringBigNumber"] = semiringBigNumber;
  exports["ringBigNumber"] = ringBigNumber;
  exports["bigNumberLModule"] = bigNumberLModule;
  exports["bigNumberRModule"] = bigNumberRModule;
  exports["embedInt'"] = embedInt$prime;
  exports["decodeBigNumber"] = decodeBigNumber;
  exports["encodeBigNumber"] = encodeBigNumber;
  exports["pow"] = $foreign.pow;
  exports["toString"] = $foreign.toString;
  exports["toTwosComplement"] = $foreign.toTwosComplement;
})(PS["Network.Ethereum.Core.BigNumber"] = PS["Network.Ethereum.Core.BigNumber"] || {});
(function(exports) {
    "use strict";
  var BigNumber =require("bn.js"); 

  exports.toBigNumber = function(str) {
      return new BigNumber(str, 16);
  };

  var signedIsNegative = function (value) {
      var head = new BigNumber(value.substr(0, 1), 16).toString(2);
      var msb;
      if (head.length == 4) {
          msb = head.substr(0,1);
      } else {
          msb = '0';
      }
      return msb === '1';
  };

  exports.toBigNumberFromSignedHexString = function (value) {
      if (signedIsNegative(value)) {
          return new BigNumber(value, 16).sub(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).subn(1);
      }
      return new BigNumber(value, 16);
  };
})(PS["Network.Ethereum.Core.HexString"] = PS["Network.Ethereum.Core.HexString"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Core.HexString"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Simple_JSON = PS["Simple.JSON"];        
  var Pos = (function () {
      function Pos() {

      };
      Pos.value = new Pos();
      return Pos;
  })();
  var Neg = (function () {
      function Neg() {

      };
      Neg.value = new Neg();
      return Neg;
  })();
  var Signed = (function () {
      function Signed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Signed.create = function (value0) {
          return function (value1) {
              return new Signed(value0, value1);
          };
      };
      return Signed;
  })();
  var HexString = function (x) {
      return x;
  };
  var unHex = function (v) {
      return v;
  };
  var toByteString = function (hx) {
      return Data_Maybe.fromJust()(Data_ByteString.fromString(unHex(hx))(Node_Encoding.Hex.value));
  };
  var takeHex = function (n) {
      return function (v) {
          return HexString(Data_String.take(n)(v));
      };
  };
  var showHexString = new Data_Show.Show(function (v) {
      return "0x" + v;
  });
  var semigpStringEq = Data_Semigroup.semigroupString;                              
  var monoidStringEq = Data_Monoid.monoidString;
  var mkHexString = function (str) {
      if (Data_String.length(str) % 2 !== 0) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          var hexAlph = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordChar)(Data_String.toCharArray("0123456789abcdefABCDEF"));
          var go = function ($copy_s) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(s) {
                  var v = Data_Array.uncons(s);
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var $44 = Data_Set.member(Data_Ord.ordChar)(v.value0.head)(hexAlph);
                      if ($44) {
                          $copy_s = v.value0.tail;
                          return;
                      };
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Network.Ethereum.Core.HexString line 139, column 16 - line 144, column 27: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_s);
              };
              return $tco_result;
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(HexString)((function () {
              var v = Data_String.stripPrefix("0x")(str);
              if (v instanceof Data_Maybe.Nothing) {
                  var $49 = Data_Maybe.isJust(go(Data_String.toCharArray(str)));
                  if ($49) {
                      return Data_Maybe.Just.create(Data_String.toLower(str));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var $50 = Data_Maybe.isJust(go(Data_String.toCharArray(v.value0)));
                  if ($50) {
                      return Data_Maybe.Just.create(Data_String.toLower(v.value0));
                  };
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Network.Ethereum.Core.HexString line 130, column 7 - line 136, column 35: " + [ v.constructor.name ]);
          })());
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.HexString line 126, column 1 - line 126, column 41: " + [ str.constructor.name ]);
  };
  var toSignedHexString = function (bn) {
      var sgn = (function () {
          var $52 = Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(bn)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber));
          if ($52) {
              return Neg.value;
          };
          return Pos.value;
      })();
      var rawStr = Network_Ethereum_Core_BigNumber.toString(Data_Int.hexadecimal)(bn);
      var str = Data_Maybe.fromJust()(mkHexString((function () {
          var $53 = Data_Int.even(Data_String.length(rawStr));
          if ($53) {
              return rawStr;
          };
          return "0" + rawStr;
      })()));
      return new Signed(sgn, str);
  };
  var toHexString = function (bn) {
      var v = toSignedHexString(bn);
      return v.value1;
  }; 
  var hexStringOrd = Data_Ord.ordString;
  var hexStringEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String.toLower(v) === Data_String.toLower(v1);
      };
  });
  var hexLength = function (v) {
      return Data_String.length(v);
  };
  var getPadLength = function (len) {
      var n = len % 64;
      var $64 = n === 0;
      if ($64) {
          return 0;
      };
      return 64 - n | 0;
  };
  var fromByteString = function (bs) {
      return Data_Maybe.fromJust()(mkHexString(Data_ByteString.toString(bs)(Node_Encoding.Hex.value)));
  };
  var eqSign = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Pos && y instanceof Pos) {
              return true;
          };
          if (x instanceof Neg && y instanceof Neg) {
              return true;
          };
          return false;
      };
  });
  var padLeftSigned = function (v) {
      var sgn = (function () {
          var $74 = Data_Eq.eq(eqSign)(v.value0)(Pos.value);
          if ($74) {
              return "0";
          };
          return "f";
      })();
      var padLength = getPadLength(hexLength(v.value1));
      var padding = Data_Maybe.fromJust()(mkHexString(Data_String.fromCharArray(Data_Array.replicate(padLength)(sgn))));
      return Data_Semigroup.append(semigpStringEq)(padding)(v.value1);
  };
  var padRightSigned = function (v) {
      var sgn = (function () {
          var $78 = Data_Eq.eq(eqSign)(v.value0)(Pos.value);
          if ($78) {
              return "0";
          };
          return "f";
      })();
      var padLength = getPadLength(hexLength(v.value1));
      var padding = Data_Maybe.fromJust()(mkHexString(Data_String.fromCharArray(Data_Array.replicate(padLength)(sgn))));
      return Data_Semigroup.append(semigpStringEq)(v.value1)(padding);
  };
  var asSigned = function (a) {
      return new Signed(Pos.value, a);
  };
  var padLeft = function ($89) {
      return padLeftSigned(asSigned($89));
  };
  var padRight = function ($90) {
      return padRightSigned(asSigned($90));
  };
  var _encode = function ($91) {
      return "0x" + unHex($91);
  };
  var encodeHexString = new Data_Foreign_Class.Encode(function ($92) {
      return Data_Foreign_Class.encode(Data_Foreign_Class.stringEncode)(_encode($92));
  });
  var _decode = function (str) {
      var v = mkHexString(str);
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Failed to parse as HexString: " + str);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.HexString line 97, column 15 - line 99, column 60: " + [ v.constructor.name ]);
  };
  var decodeHexString = new Data_Foreign_Class.Decode(function (s) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.decode(Data_Foreign_Class.stringDecode)(s))(function (v) {
          return Data_Either.either(function ($94) {
              return Data_Foreign.fail(Data_Foreign.ForeignError.create($94));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(_decode(v));
      });
  });
  exports["Pos"] = Pos;
  exports["Neg"] = Neg;
  exports["Signed"] = Signed;
  exports["asSigned"] = asSigned;
  exports["mkHexString"] = mkHexString;
  exports["unHex"] = unHex;
  exports["hexLength"] = hexLength;
  exports["takeHex"] = takeHex;
  exports["getPadLength"] = getPadLength;
  exports["padLeftSigned"] = padLeftSigned;
  exports["padLeft"] = padLeft;
  exports["padRightSigned"] = padRightSigned;
  exports["padRight"] = padRight;
  exports["toSignedHexString"] = toSignedHexString;
  exports["toHexString"] = toHexString;
  exports["toByteString"] = toByteString;
  exports["fromByteString"] = fromByteString;
  exports["eqSign"] = eqSign;
  exports["showHexString"] = showHexString;
  exports["hexStringEq"] = hexStringEq;
  exports["hexStringOrd"] = hexStringOrd;
  exports["semigpStringEq"] = semigpStringEq;
  exports["monoidStringEq"] = monoidStringEq;
  exports["decodeHexString"] = decodeHexString;
  exports["encodeHexString"] = encodeHexString;
  exports["toBigNumber"] = $foreign.toBigNumber;
  exports["toBigNumberFromSignedHexString"] = $foreign.toBigNumberFromSignedHexString;
})(PS["Network.Ethereum.Core.HexString"] = PS["Network.Ethereum.Core.HexString"] || {});
(function(exports) {
    "use strict";
  var keccak =require("keccak"); 

  exports._keccak256 = function (a) {
      return keccak('keccak256').update(a).digest();
  };
})(PS["Network.Ethereum.Core.Keccak256"] = PS["Network.Ethereum.Core.Keccak256"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Core.Keccak256"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Keccak256 = function (keccak256) {
      this.keccak256 = keccak256;
  };
  var keccak256ByteString = new Keccak256($foreign._keccak256);
  var keccak256 = function (dict) {
      return dict.keccak256;
  }; 
  var keccak256String = new Keccak256(function ($2) {
      return keccak256(keccak256ByteString)(Data_Maybe.fromJust()(Data_Function.flip(Data_ByteString.fromString)(Node_Encoding.UTF8.value)($2)));
  });
  var toSelector = function ($3) {
      return Network_Ethereum_Core_HexString.takeHex(8)(Network_Ethereum_Core_HexString.fromByteString(keccak256(keccak256String)($3)));
  };
  exports["Keccak256"] = Keccak256;
  exports["keccak256"] = keccak256;
  exports["toSelector"] = toSelector;
  exports["keccak256ByteString"] = keccak256ByteString;
  exports["keccak256String"] = keccak256String;
})(PS["Network.Ethereum.Core.Keccak256"] = PS["Network.Ethereum.Core.Keccak256"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Core.Signatures"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = PS["Network.Ethereum.Core.Keccak256"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Simple_JSON = PS["Simple.JSON"];
  var Address = function (x) {
      return x;
  };
  var unAddress = function (v) {
      return v;
  };
  var mkAddress = function (hx) {
      var $61 = Network_Ethereum_Core_HexString.hexLength(hx) === 40;
      if ($61) {
          return Data_Maybe.Just.create(Address(hx));
      };
      return Data_Maybe.Nothing.value;
  }; 
  var encodeAddress = Network_Ethereum_Core_HexString.encodeHexString;                       
  var addressShow = Network_Ethereum_Core_HexString.showHexString;
  var addressOrd = Network_Ethereum_Core_HexString.hexStringOrd;
  var addressEq = Network_Ethereum_Core_HexString.hexStringEq;
  exports["unAddress"] = unAddress;
  exports["mkAddress"] = mkAddress;
  exports["addressShow"] = addressShow;
  exports["addressEq"] = addressEq;
  exports["addressOrd"] = addressOrd;
  exports["encodeAddress"] = encodeAddress;
})(PS["Network.Ethereum.Core.Signatures"] = PS["Network.Ethereum.Core.Signatures"] || {});
(function(exports) {
    "use strict";


  exports._sendAsync = function (provider) {
      return function (request) {
          return function(onError, onSuccess) {
              provider.sendAsync(request, function(err, succ) {
                  if (err) {
                      onError(err);
                  } else {
                      onSuccess(succ);
                  }
              });
              return function (cancelError, onCancelerError, onCancelerSuccess) {
                  onCancelerSuccess();
              };
          };
      };
  };
})(PS["Network.Ethereum.Web3.JsonRPC"] = PS["Network.Ethereum.Web3.JsonRPC"] || {});
(function(exports) {
    "use strict";
  const HttpProvider = require('ethjs-provider-http');

  exports.httpProvider = function (providerUrl) {
      return function () {
          if (typeof web3 !== 'undefined' && web3.currentProvider.host == providerUrl) {
             return web3.currentProvider;
          } else {
             return new HttpProvider(providerUrl);
          }
      };
  };
})(PS["Network.Ethereum.Web3.Types.Provider"] = PS["Network.Ethereum.Web3.Types.Provider"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Web3.Types.Provider"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  exports["httpProvider"] = $foreign.httpProvider;
})(PS["Network.Ethereum.Web3.Types.Provider"] = PS["Network.Ethereum.Web3.Types.Provider"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Module = PS["Data.Module"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];                        
  var encodeValue = Network_Ethereum_Core_BigNumber.encodeBigNumber;
  exports["encodeValue"] = encodeValue;
})(PS["Network.Ethereum.Web3.Types.EtherUnit"] = PS["Network.Ethereum.Web3.Types.EtherUnit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Error_Util = PS["Control.Error.Util"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Reader = PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Foreign_Generic = PS["Data.Foreign.Generic"];
  var Data_Foreign_Generic_Class = PS["Data.Foreign.Generic.Class"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Provider = PS["Network.Ethereum.Web3.Types.Provider"];
  var Prelude = PS["Prelude"];
  var Simple_JSON = PS["Simple.JSON"];
  var Type_Row_Effect_Equality = PS["Type.Row.Effect.Equality"];
  var TransactionOptions = function (x) {
      return x;
  };
  var Rpc = (function () {
      function Rpc(value0) {
          this.value0 = value0;
      };
      Rpc.create = function (value0) {
          return new Rpc(value0);
      };
      return Rpc;
  })();
  var RemoteError = (function () {
      function RemoteError(value0) {
          this.value0 = value0;
      };
      RemoteError.create = function (value0) {
          return new RemoteError(value0);
      };
      return RemoteError;
  })();
  var ParserError = (function () {
      function ParserError(value0) {
          this.value0 = value0;
      };
      ParserError.create = function (value0) {
          return new ParserError(value0);
      };
      return ParserError;
  })();
  var NullError = (function () {
      function NullError() {

      };
      NullError.value = new NullError();
      return NullError;
  })();
  var Response = function (x) {
      return x;
  };   
  var NullStorageError = (function () {
      function NullStorageError(value0) {
          this.value0 = value0;
      };
      NullStorageError.create = function (value0) {
          return new NullStorageError(value0);
      };
      return NullStorageError;
  })();
  var BlockNumber = function (x) {
      return x;
  };
  var Latest = (function () {
      function Latest() {

      };
      Latest.value = new Latest();
      return Latest;
  })();
  var Pending = (function () {
      function Pending() {

      };
      Pending.value = new Pending();
      return Pending;
  })();
  var Earliest = (function () {
      function Earliest() {

      };
      Earliest.value = new Earliest();
      return Earliest;
  })();
  var BN = (function () {
      function BN(value0) {
          this.value0 = value0;
      };
      BN.create = function (value0) {
          return new BN(value0);
      };
      return BN;
  })();      
  var newtypeBlockNumber = new Data_Newtype.Newtype(function (n) {
      return n;
  }, BlockNumber);                                                                    
  var monadThrowWeb3 = Control_Monad_Reader_Trans.monadThrowReaderT(Control_Monad_Aff.monadThrowAff);
  var monadAskWeb3 = Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Aff.monadAff);
  var monadAffWeb3 = Control_Monad_Aff_Class.monadAffReader(Control_Monad_Aff_Class.monadAffAff);
  var throwWeb3 = function ($624) {
      return Control_Monad_Aff_Class.liftAff(monadAffWeb3)(Control_Monad_Aff["liftEff'"](Control_Monad_Eff_Exception.throwException($624)));
  };
  var mkRequest = function (name) {
      return function (reqId) {
          return function (ps) {
              return {
                  jsonrpc: "2.0",
                  id: reqId,
                  method: name,
                  params: ps
              };
          };
      };
  };
  var genericWeb3Error = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Rpc) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof RemoteError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof ParserError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof NullError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types line 631, column 8 - line 631, column 56: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Rpc(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new RemoteError(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ParserError(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return NullError.value;
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types line 631, column 8 - line 631, column 56: " + [ x.constructor.name ]);
  });    
  var genericTransactionOptions = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.data, new Data_Generic_Rep.Product(x.from, new Data_Generic_Rep.Product(x.gas, new Data_Generic_Rep.Product(x.gasPrice, new Data_Generic_Rep.Product(x.nonce, new Data_Generic_Rep.Product(x.to, x.value))))));
  }, function (x) {
      return {
          data: x.value0,
          from: x.value1.value0,
          gas: x.value1.value1.value0,
          gasPrice: x.value1.value1.value1.value0,
          nonce: x.value1.value1.value1.value1.value0,
          to: x.value1.value1.value1.value1.value1.value0,
          value: x.value1.value1.value1.value1.value1.value1
      };
  });   
  var genericRpcError = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.code, x.message);
  }, function (x) {
      return {
          code: x.value0,
          message: x.value1
      };
  });
  var showRpcError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRpcError)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsRec(Data_Generic_Rep_Show.genericShowFieldsProduct(Data_Generic_Rep_Show.genericShowFieldsField(Data_Show.showInt)(new Data_Symbol.IsSymbol(function () {
      return "code";
  })))(Data_Generic_Rep_Show.genericShowFieldsField(Data_Show.showString)(new Data_Symbol.IsSymbol(function () {
      return "message";
  })))))(new Data_Symbol.IsSymbol(function () {
      return "RpcError";
  }))));
  var showWeb3Error = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericWeb3Error)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(showRpcError))(new Data_Symbol.IsSymbol(function () {
      return "Rpc";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "RemoteError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "ParserError";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "NullError";
  })))))));
  var genericCallError = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0._data, x.value0.signature);
  }, function (x) {
      return new NullStorageError({
          _data: x.value0,
          signature: x.value1
      });
  });
  var showCallError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericCallError)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsRec(Data_Generic_Rep_Show.genericShowFieldsProduct(Data_Generic_Rep_Show.genericShowFieldsField(Network_Ethereum_Core_HexString.showHexString)(new Data_Symbol.IsSymbol(function () {
      return "_data";
  })))(Data_Generic_Rep_Show.genericShowFieldsField(Data_Show.showString)(new Data_Symbol.IsSymbol(function () {
      return "signature";
  })))))(new Data_Symbol.IsSymbol(function () {
      return "NullStorageError";
  }))));
  var genericBlock = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.difficulty, new Data_Generic_Rep.Product(x.extraData, new Data_Generic_Rep.Product(x.gasLimit, new Data_Generic_Rep.Product(x.gasUsed, new Data_Generic_Rep.Product(x.hash, new Data_Generic_Rep.Product(x.logsBloom, new Data_Generic_Rep.Product(x.miner, new Data_Generic_Rep.Product(x.nonce, new Data_Generic_Rep.Product(x.number, new Data_Generic_Rep.Product(x.parentHash, new Data_Generic_Rep.Product(x.receiptsRoot, new Data_Generic_Rep.Product(x.sha3Uncles, new Data_Generic_Rep.Product(x.size, new Data_Generic_Rep.Product(x.stateRoot, new Data_Generic_Rep.Product(x.timestamp, new Data_Generic_Rep.Product(x.totalDifficulty, new Data_Generic_Rep.Product(x.transactions, new Data_Generic_Rep.Product(x.transactionsRoot, x.uncles))))))))))))))))));
  }, function (x) {
      return {
          difficulty: x.value0,
          extraData: x.value1.value0,
          gasLimit: x.value1.value1.value0,
          gasUsed: x.value1.value1.value1.value0,
          hash: x.value1.value1.value1.value1.value0,
          logsBloom: x.value1.value1.value1.value1.value1.value0,
          miner: x.value1.value1.value1.value1.value1.value1.value0,
          nonce: x.value1.value1.value1.value1.value1.value1.value1.value0,
          number: x.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          parentHash: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          receiptsRoot: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          sha3Uncles: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          size: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          stateRoot: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          timestamp: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          totalDifficulty: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          transactions: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          transactionsRoot: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0,
          uncles: x.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1
      };
  });                                                                                             
  var functorWeb3 = Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Aff.functorAff);
  var encodeTransactionOptions = new Data_Foreign_Class.Encode(Data_Foreign_Generic.genericEncode(genericTransactionOptions)(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
      return "TransactionOptions";
  }))(Data_Foreign_Generic_Class.genericEncodeArgsRec(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "data";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_HexString.encodeHexString)))(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "from";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_Signatures.encodeAddress)))(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "gas";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_BigNumber.encodeBigNumber)))(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "gasPrice";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_BigNumber.encodeBigNumber)))(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "nonce";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_BigNumber.encodeBigNumber)))(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "to";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Core_Signatures.encodeAddress)))(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
      return "value";
  }))(Data_Foreign_Class.maybeEncode(Network_Ethereum_Web3_Types_EtherUnit.encodeValue)))))))))))((function () {
      var $511 = {};
      for (var $512 in Data_Foreign_Generic.defaultOptions) {
          if ({}.hasOwnProperty.call(Data_Foreign_Generic.defaultOptions, $512)) {
              $511[$512] = Data_Foreign_Generic["defaultOptions"][$512];
          };
      };
      $511.unwrapSingleConstructors = true;
      return $511;
  })()));
  var encodeRpcError = new Data_Foreign_Class.Encode(function (x) {
      return Data_Foreign_Generic.genericEncode(genericRpcError)(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
          return "RpcError";
      }))(Data_Foreign_Generic_Class.genericEncodeArgsRec(Data_Foreign_Generic_Class.genericEncodeFieldsProduct(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))(Data_Foreign_Class.intEncode))(Data_Foreign_Generic_Class.genericEncodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "message";
      }))(Data_Foreign_Class.stringEncode)))))((function () {
          var $514 = {};
          for (var $515 in Data_Foreign_Generic.defaultOptions) {
              if ({}.hasOwnProperty.call(Data_Foreign_Generic.defaultOptions, $515)) {
                  $514[$515] = Data_Foreign_Generic["defaultOptions"][$515];
              };
          };
          $514.unwrapSingleConstructors = true;
          return $514;
      })())(x);
  });
  var encodeBlockNumber = Network_Ethereum_Core_BigNumber.encodeBigNumber;
  var encodeChainCursor = new Data_Foreign_Class.Encode(function (cm) {
      if (cm instanceof Latest) {
          return Data_Foreign_Class.encode(Data_Foreign_Class.stringEncode)("latest");
      };
      if (cm instanceof Pending) {
          return Data_Foreign_Class.encode(Data_Foreign_Class.stringEncode)("pending");
      };
      if (cm instanceof Earliest) {
          return Data_Foreign_Class.encode(Data_Foreign_Class.stringEncode)("earliest");
      };
      if (cm instanceof BN) {
          return Data_Foreign_Class.encode(encodeBlockNumber)(cm.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types line 133, column 15 - line 137, column 21: " + [ cm.constructor.name ]);
  });
  var defaultTransactionOptions = {
      from: Data_Maybe.Nothing.value,
      to: Data_Maybe.Nothing.value,
      value: Data_Maybe.Nothing.value,
      gas: Data_Maybe.Nothing.value,
      gasPrice: Data_Maybe.Nothing.value,
      data: Data_Maybe.Nothing.value,
      nonce: Data_Maybe.Nothing.value
  };     
  var decodeRpcError = new Data_Foreign_Class.Decode(function (x) {
      return Data_Foreign_Generic.genericDecode(genericRpcError)(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
          return "RpcError";
      }))(Data_Foreign_Generic_Class.genericDecodeArgsRec(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))(Data_Foreign_Class.intDecode))(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "message";
      }))(Data_Foreign_Class.stringDecode))))(Data_Foreign_Generic_Class.genericCountArgsRec))((function () {
          var $534 = {};
          for (var $535 in Data_Foreign_Generic.defaultOptions) {
              if ({}.hasOwnProperty.call(Data_Foreign_Generic.defaultOptions, $535)) {
                  $534[$535] = Data_Foreign_Generic["defaultOptions"][$535];
              };
          };
          $534.unwrapSingleConstructors = true;
          return $534;
      })())(x);
  });
  var decodeWeb3Error = new Data_Foreign_Class.Decode(function (x) {
      var nullParser = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp("result")(x))(function (v) {
          var $538 = Data_Foreign.isNull(v);
          if ($538) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(NullError.value);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readString(v))(function (r) {
              return Data_Foreign.fail(new Data_Foreign.TypeMismatch("NullError", r));
          });
      });
      return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Rpc.create)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp("error")(x))(Data_Foreign_Class.decode(decodeRpcError))))(nullParser);
  });
  var runWeb3 = function (p) {
      return function (v) {
          var parseMsg = function (msg) {
              return Control_Error_Util.hush(Control_Monad_Except.runExcept(Data_Foreign_Generic.genericDecodeJSON(genericWeb3Error)(Data_Foreign_Generic_Class.genericDecodeSum(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "Rpc";
              }))(Data_Foreign_Generic_Class.genericDecodeArgsArgument(decodeRpcError))(Data_Foreign_Generic_Class.genericCountArgsArgument))(Data_Foreign_Generic_Class.genericDecodeSum(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "RemoteError";
              }))(Data_Foreign_Generic_Class.genericDecodeArgsArgument(Data_Foreign_Class.stringDecode))(Data_Foreign_Generic_Class.genericCountArgsArgument))(Data_Foreign_Generic_Class.genericDecodeSum(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "ParserError";
              }))(Data_Foreign_Generic_Class.genericDecodeArgsArgument(Data_Foreign_Class.stringDecode))(Data_Foreign_Generic_Class.genericCountArgsArgument))(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NullError";
              }))(Data_Foreign_Generic_Class.genericDecodeArgsNoArguments)(Data_Foreign_Generic_Class.genericCountArgsNoArguments)))))(Data_Foreign_Generic.defaultOptions)(msg)));
          };
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(Control_Monad_Reader_Trans.runReaderT(v)(p)))(function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(v1.value0))(function ($625) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Left.create($625));
                  })(parseMsg(Control_Monad_Eff_Exception.message(v1.value0)));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Right(v1.value0));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types line 387, column 61 - line 389, column 28: " + [ v1.constructor.name ]);
          });
      };
  };
  var decodeResponse$prime = function (dictDecode) {
      return new Data_Foreign_Class.Decode(function (a) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Response)(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Left.create)(Data_Foreign_Class.decode(decodeWeb3Error)(a)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Right.create)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp("result")(a))(Data_Foreign_Class.decode(dictDecode)))));
      });
  };
  var decodeBlockNumber = Network_Ethereum_Core_BigNumber.decodeBigNumber;
  var decodeBlock = new Data_Foreign_Class.Decode(function (x) {
      return Data_Foreign_Generic.genericDecode(genericBlock)(Data_Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
          return "Block";
      }))(Data_Foreign_Generic_Class.genericDecodeArgsRec(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "difficulty";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "extraData";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "gasLimit";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "gasUsed";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "hash";
      }))(Data_Foreign_Class.maybeDecode(Network_Ethereum_Core_HexString.decodeHexString)))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "logsBloom";
      }))(Data_Foreign_Class.maybeDecode(Network_Ethereum_Core_HexString.decodeHexString)))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "miner";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "nonce";
      }))(Data_Foreign_Class.maybeDecode(Network_Ethereum_Core_HexString.decodeHexString)))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "number";
      }))(Data_Foreign_Class.maybeDecode(Network_Ethereum_Core_BigNumber.decodeBigNumber)))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "parentHash";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "receiptsRoot";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "sha3Uncles";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "size";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "stateRoot";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "timestamp";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "totalDifficulty";
      }))(Network_Ethereum_Core_BigNumber.decodeBigNumber))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "transactions";
      }))(Data_Foreign_Class.arrayDecode(Network_Ethereum_Core_HexString.decodeHexString)))(Data_Foreign_Generic_Class.genericDecodeFieldsProduct(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "transactionsRoot";
      }))(Network_Ethereum_Core_HexString.decodeHexString))(Data_Foreign_Generic_Class.genericDecodeFieldsField(new Data_Symbol.IsSymbol(function () {
          return "uncles";
      }))(Data_Foreign_Class.arrayDecode(Network_Ethereum_Core_HexString.decodeHexString))))))))))))))))))))))(Data_Foreign_Generic_Class.genericCountArgsRec))((function () {
          var $556 = {};
          for (var $557 in Data_Foreign_Generic.defaultOptions) {
              if ({}.hasOwnProperty.call(Data_Foreign_Generic.defaultOptions, $557)) {
                  $556[$557] = Data_Foreign_Generic["defaultOptions"][$557];
              };
          };
          $556.unwrapSingleConstructors = true;
          return $556;
      })())(x);
  });
  var bindWeb3 = Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff);
  var applicativeWeb3 = Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff);
  var _to = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.to;
      })(function (v) {
          return function (addr) {
              return TransactionOptions((function () {
                  var $579 = {};
                  for (var $580 in v) {
                      if ({}.hasOwnProperty.call(v, $580)) {
                          $579[$580] = v[$580];
                      };
                  };
                  $579.to = addr;
                  return $579;
              })());
          };
      })(dictStrong);
  };
  var _data = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.data;
      })(function (v) {
          return function (dat) {
              return TransactionOptions((function () {
                  var $609 = {};
                  for (var $610 in v) {
                      if ({}.hasOwnProperty.call(v, $610)) {
                          $609[$610] = v[$610];
                      };
                  };
                  $609.data = dat;
                  return $609;
              })());
          };
      })(dictStrong);
  };
  exports["BlockNumber"] = BlockNumber;
  exports["Latest"] = Latest;
  exports["Pending"] = Pending;
  exports["Earliest"] = Earliest;
  exports["BN"] = BN;
  exports["TransactionOptions"] = TransactionOptions;
  exports["defaultTransactionOptions"] = defaultTransactionOptions;
  exports["_to"] = _to;
  exports["_data"] = _data;
  exports["runWeb3"] = runWeb3;
  exports["throwWeb3"] = throwWeb3;
  exports["mkRequest"] = mkRequest;
  exports["Response"] = Response;
  exports["Rpc"] = Rpc;
  exports["RemoteError"] = RemoteError;
  exports["ParserError"] = ParserError;
  exports["NullError"] = NullError;
  exports["NullStorageError"] = NullStorageError;
  exports["decodeBlockNumber"] = decodeBlockNumber;
  exports["encodeBlockNumber"] = encodeBlockNumber;
  exports["newtypeBlockNumber"] = newtypeBlockNumber;
  exports["encodeChainCursor"] = encodeChainCursor;
  exports["genericBlock"] = genericBlock;
  exports["decodeBlock"] = decodeBlock;
  exports["genericTransactionOptions"] = genericTransactionOptions;
  exports["encodeTransactionOptions"] = encodeTransactionOptions;
  exports["functorWeb3"] = functorWeb3;
  exports["applicativeWeb3"] = applicativeWeb3;
  exports["bindWeb3"] = bindWeb3;
  exports["monadAffWeb3"] = monadAffWeb3;
  exports["monadThrowWeb3"] = monadThrowWeb3;
  exports["monadAskWeb3"] = monadAskWeb3;
  exports["decodeResponse'"] = decodeResponse$prime;
  exports["genericCallError"] = genericCallError;
  exports["showCallError"] = showCallError;
  exports["genericRpcError"] = genericRpcError;
  exports["showRpcError"] = showRpcError;
  exports["decodeRpcError"] = decodeRpcError;
  exports["encodeRpcError"] = encodeRpcError;
  exports["genericWeb3Error"] = genericWeb3Error;
  exports["showWeb3Error"] = showWeb3Error;
  exports["decodeWeb3Error"] = decodeWeb3Error;
})(PS["Network.Ethereum.Web3.Types.Types"] = PS["Network.Ethereum.Web3.Types.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.Ethereum.Web3.JsonRPC"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Aff_Compat = PS["Control.Monad.Aff.Compat"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Reader = PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Foreign_Generic = PS["Data.Foreign.Generic"];
  var Data_Foreign_Generic_Class = PS["Data.Foreign.Generic.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Provider = PS["Network.Ethereum.Web3.Types.Provider"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Prelude = PS["Prelude"];        
  var Remote = function (remote_) {
      this.remote_ = remote_;
  };
  var remote_ = function (dict) {
      return dict.remote_;
  };
  var remoteInductive = function (dictEncode) {
      return function (dictRemote) {
          return new Remote(function (f) {
              return function (x) {
                  return remote_(dictRemote)(function (p) {
                      return function (args) {
                          return f(p)(Data_Array.cons(Data_Foreign_Class.encode(dictEncode)(x))(args));
                      };
                  });
              };
          });
      };
  };
  var remoteBase = function (dictDecode) {
      return new Remote(function (f) {
          var asError = function (e) {
              return Control_Monad_Eff_Exception.error(Data_Foreign_Generic.genericEncodeJSON(Network_Ethereum_Web3_Types_Types.genericWeb3Error)(Data_Foreign_Generic_Class.genericEncodeSum(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "Rpc";
              }))(Data_Foreign_Generic_Class.genericEncodeArgsArgument(Network_Ethereum_Web3_Types_Types.encodeRpcError)))(Data_Foreign_Generic_Class.genericEncodeSum(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "RemoteError";
              }))(Data_Foreign_Generic_Class.genericEncodeArgsArgument(Data_Foreign_Class.stringEncode)))(Data_Foreign_Generic_Class.genericEncodeSum(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "ParserError";
              }))(Data_Foreign_Generic_Class.genericEncodeArgsArgument(Data_Foreign_Class.stringEncode)))(Data_Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NullError";
              }))(Data_Foreign_Generic_Class.genericEncodeArgsNoArguments)))))(Data_Foreign_Generic.defaultOptions)(e));
          };
          return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Control_Monad_Reader_Class.ask(Network_Ethereum_Web3_Types_Types.monadAskWeb3))(function (v) {
              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Control_Monad_Aff_Class.liftAff(Network_Ethereum_Web3_Types_Types.monadAffWeb3)(Control_Monad_Aff.attempt(f(v)(Data_Monoid.mempty(Data_Monoid.monoidArray)))))(function (v1) {
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(Network_Ethereum_Web3_Types_Types.RemoteError.create(Data_Show.show(Control_Monad_Eff_Exception.showError)(v1.value0))));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      var v2 = Control_Monad_Except.runExcept(Data_Foreign_Class.decode(Network_Ethereum_Web3_Types_Types["decodeResponse'"](dictDecode))(v1.value0));
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(Network_Ethereum_Web3_Types_Types.ParserError.create(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v2.value0))));
                      };
                      if (v2 instanceof Data_Either.Right) {
                          if (v2.value0 instanceof Data_Either.Left) {
                              return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(v2.value0.value0));
                          };
                          if (v2.value0 instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(v2.value0.value0);
                          };
                          throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC line 38, column 31 - line 40, column 28: " + [ v2.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC line 35, column 20 - line 40, column 28: " + [ v2.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC line 33, column 5 - line 40, column 28: " + [ v1.constructor.name ]);
              });
          });
      });
  };
  var remote = function (dictRemote) {
      return function (n) {
          return remote_(dictRemote)(function (provider) {
              return function (ps) {
                  return Control_Monad_Aff_Compat.fromEffFnAff($foreign._sendAsync(provider)(Network_Ethereum_Web3_Types_Types.mkRequest(n)(1)(ps)));
              };
          });
      };
  };
  exports["remote_"] = remote_;
  exports["Remote"] = Remote;
  exports["remote"] = remote;
  exports["remoteBase"] = remoteBase;
  exports["remoteInductive"] = remoteInductive;
})(PS["Network.Ethereum.Web3.JsonRPC"] = PS["Network.Ethereum.Web3.JsonRPC"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_JsonRPC = PS["Network.Ethereum.Web3.JsonRPC"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var eth_getBlockByNumber = function (cm) {
      return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeChainCursor)(Network_Ethereum_Web3_JsonRPC.remoteInductive(Data_Foreign_Class.booleanEncode)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Web3_Types_Types.decodeBlock))))("eth_getBlockByNumber")(cm)(false);
  };                                                                                                                                                                
  var eth_call = function (opts) {
      return function (cm) {
          return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeTransactionOptions)(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeChainCursor)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_HexString.decodeHexString))))("eth_call")(opts)(cm);
      };
  };
  var eth_blockNumber = Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Web3_Types_Types.decodeBlockNumber))("eth_blockNumber");
  exports["eth_blockNumber"] = eth_blockNumber;
  exports["eth_getBlockByNumber"] = eth_getBlockByNumber;
  exports["eth_call"] = eth_call;
})(PS["Network.Ethereum.Web3.Api"] = PS["Network.Ethereum.Web3.Api"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Record = PS["Data.Record"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Web3_Api = PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];        
  var UncurryFields = function (uncurryFields) {
      this.uncurryFields = uncurryFields;
  };
  var uncurryFieldsEmpty = new UncurryFields(function (v) {
      return Control_Category.id(Control_Category.categoryFn);
  });
  var uncurryFields = function (dict) {
      return dict.uncurryFields;
  };
  var uncurryFieldsInductive = function (dictIsSymbol) {
      return function (dictRowCons) {
          return function (dictRowLacks) {
              return function (dictUncurryFields) {
                  return new UncurryFields(function (r) {
                      return function (f) {
                          var before = Data_Record["delete"](dictIsSymbol)(dictRowLacks)(dictRowCons)(Data_Symbol.SProxy.value)(r);
                          var arg = Data_Record.get(dictIsSymbol)(dictRowCons)(Data_Symbol.SProxy.value)(r);
                          var partiallyApplied = f(Data_Functor_Tagged.tagged(arg));
                          return uncurryFields(dictUncurryFields)(before)(partiallyApplied);
                      };
                  });
              };
          };
      };
  };
  exports["UncurryFields"] = UncurryFields;
  exports["uncurryFields"] = uncurryFields;
  exports["uncurryFieldsEmpty"] = uncurryFieldsEmpty;
  exports["uncurryFieldsInductive"] = uncurryFieldsInductive;
})(PS["Network.Ethereum.Web3.Contract.Internal"] = PS["Network.Ethereum.Web3.Contract.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Int = PS["Data.Int"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];        
  var DProxy = (function () {
      function DProxy() {

      };
      DProxy.value = new DProxy();
      return DProxy;
  })();
  var DLProxy = (function () {
      function DLProxy() {

      };
      DLProxy.value = new DLProxy();
      return DLProxy;
  })();
  var DigitCount = function (digitCount) {
      this.digitCount = digitCount;
  };
  var KnownDigit = function (digitVal) {
      this.digitVal = digitVal;
  };
  var KnownSize = function (sizeVal) {
      this.sizeVal = sizeVal;
  };            
  var IntSize = function (KnownSize0) {
      this.KnownSize0 = KnownSize0;
  };
  var ByteSize = function (KnownSize0) {
      this.KnownSize0 = KnownSize0;
  };
  var sizeVal = function (dict) {
      return dict.sizeVal;
  }; 
  var sizeN8 = new KnownDigit(function (v) {
      return 8;
  });
  var sizeN6 = new KnownDigit(function (v) {
      return 6;
  });
  var sizeN5 = new KnownDigit(function (v) {
      return 5;
  });
  var sizeN4 = new KnownDigit(function (v) {
      return 4;
  });
  var sizeN3 = new KnownDigit(function (v) {
      return 3;
  });
  var sizeN2 = new KnownDigit(function (v) {
      return 2;
  });
  var sizeD1 = new KnownDigit(function (v) {
      return 1;
  });
  var digitVal = function (dict) {
      return dict.digitVal;
  };
  var knownSizeBase = function (dictKnownDigit) {
      return new KnownSize(function (p) {
          return digitVal(dictKnownDigit)(DProxy.value);
      });
  };
  var intSize8 = new IntSize(function () {
      return knownSizeBase(sizeN8);
  });
  var digitCount = function (dict) {
      return dict.digitCount;
  };
  var knownSizeLoop = function (dictDigitCount) {
      return function (dictKnownSize) {
          return function (dictKnownDigit) {
              return new KnownSize(function (v) {
                  var currentPow = digitCount(dictDigitCount)(DLProxy.value);
                  var head = Data_Int.pow(10)(currentPow) * digitVal(dictKnownDigit)(DProxy.value) | 0;
                  return head + sizeVal(dictKnownSize)(DLProxy.value) | 0;
              });
          };
      };
  };
  var countLoop = function (dictDigitCount) {
      return new DigitCount(function (v) {
          return digitCount(dictDigitCount)(DLProxy.value) + 1 | 0;
      });
  };
  var countBase = new DigitCount(function (v) {
      return 1;
  });
  var intSize16 = new IntSize(function () {
      return knownSizeLoop(countBase)(knownSizeBase(sizeN6))(sizeD1);
  });
  var intSize256 = new IntSize(function () {
      return knownSizeLoop(countLoop(countBase))(knownSizeLoop(countBase)(knownSizeBase(sizeN6))(sizeN5))(sizeN2);
  });
  var intSize64 = new IntSize(function () {
      return knownSizeLoop(countBase)(knownSizeBase(sizeN4))(sizeN6);
  });
  var byteSize4 = new ByteSize(function () {
      return knownSizeBase(sizeN4);
  });
  var byteSize32 = new ByteSize(function () {
      return knownSizeLoop(countBase)(knownSizeBase(sizeN2))(sizeN3);
  });
  var byteSize16 = new ByteSize(function () {
      return knownSizeLoop(countBase)(knownSizeBase(sizeN6))(sizeD1);
  });
  exports["KnownSize"] = KnownSize;
  exports["sizeVal"] = sizeVal;
  exports["DLProxy"] = DLProxy;
  exports["IntSize"] = IntSize;
  exports["ByteSize"] = ByteSize;
  exports["DProxy"] = DProxy;
  exports["KnownDigit"] = KnownDigit;
  exports["digitVal"] = digitVal;
  exports["DigitCount"] = DigitCount;
  exports["digitCount"] = digitCount;
  exports["countBase"] = countBase;
  exports["countLoop"] = countLoop;
  exports["sizeD1"] = sizeD1;
  exports["sizeN2"] = sizeN2;
  exports["sizeN3"] = sizeN3;
  exports["sizeN4"] = sizeN4;
  exports["sizeN5"] = sizeN5;
  exports["sizeN6"] = sizeN6;
  exports["sizeN8"] = sizeN8;
  exports["knownSizeBase"] = knownSizeBase;
  exports["knownSizeLoop"] = knownSizeLoop;
  exports["intSize8"] = intSize8;
  exports["intSize16"] = intSize16;
  exports["intSize64"] = intSize64;
  exports["intSize256"] = intSize256;
  exports["byteSize4"] = byteSize4;
  exports["byteSize16"] = byteSize16;
  exports["byteSize32"] = byteSize32;
})(PS["Network.Ethereum.Web3.Solidity.Size"] = PS["Network.Ethereum.Web3.Solidity.Size"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var BytesN = function (x) {
      return x;
  };
  var update = function (dictKnownSize) {
      return function (v) {
          return BytesN;
      };
  };
  var unBytesN = function (dictKnownSize) {
      return function (v) {
          return v;
      };
  };
  var showBytesN = function (dictKnownSize) {
      return new Data_Show.Show(function (v) {
          return Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString(Data_ByteString.toString(v)(Node_Encoding.Hex.value))));
      });
  };
  var proxyBytesN = function (dictKnownSize) {
      return Data_ByteString.empty;
  };
  var fromByteString = function (dictKnownSize) {
      return function (v) {
          return function (bs) {
              var $12 = !(Data_ByteString.length(bs) === Network_Ethereum_Web3_Solidity_Size.sizeVal(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value));
              if ($12) {
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Just.create(bs);
          };
      };
  };
  exports["unBytesN"] = unBytesN;
  exports["proxyBytesN"] = proxyBytesN;
  exports["update"] = update;
  exports["fromByteString"] = fromByteString;
  exports["showBytesN"] = showBytesN;
})(PS["Network.Ethereum.Web3.Solidity.Bytes"] = PS["Network.Ethereum.Web3.Solidity.Bytes"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Prelude = PS["Prelude"];        
  var UIntN = function (x) {
      return x;
  };
  var unUIntN = function (dictKnownSize) {
      return function (v) {
          return v;
      };
  };
  var uIntNFromBigNumber = function (dictKnownSize) {
      return function (v) {
          return function (a) {
              if (Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(a)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  var maxVal = Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Network_Ethereum_Core_BigNumber.pow(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(2))(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value)))(Data_Semiring.one(Network_Ethereum_Core_BigNumber.semiringBigNumber));
                  var $7 = Data_Ord.greaterThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(a)(maxVal);
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(UIntN(a));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.UInt line 34, column 1 - line 34, column 90: " + [ v.constructor.name, a.constructor.name ]);
          };
      };
  };
  var showUIntN = Network_Ethereum_Core_BigNumber.showBigNumber;
  exports["unUIntN"] = unUIntN;
  exports["uIntNFromBigNumber"] = uIntNFromBigNumber;
  exports["showUIntN"] = showUIntN;
})(PS["Network.Ethereum.Web3.Solidity.UInt"] = PS["Network.Ethereum.Web3.Solidity.UInt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - (v.column - 1 | 0) % 8 | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String.split(Data_Newtype.wrap(Data_String.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];        
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      return function ($90) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runParserT(Data_Identity.monadIdentity)(s)($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };                            
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["position"] = position;
  exports["fail"] = fail;
  exports["failWithPosition"] = failWithPosition;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["monadThrowParserT"] = monadThrowParserT;
  exports["altParserT"] = altParserT;
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];        
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var lookAhead = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
              });
          })));
      };
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["tryRethrow"] = tryRethrow;
  exports["lookAhead"] = lookAhead;
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];        
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String.drop, Data_String.indexOf, Data_String["null"], Data_String.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              var v1 = uncons(dictStringLike)(v);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                      return new Text_Parsing_Parser.ParseState(v1.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v2.value1)(Data_String.singleton(v1.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 54, column 3 - line 61, column 16: " + [ v1.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (v) {
                  var $61 = f(v);
                  if ($61) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.singleton(v) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  exports["drop"] = drop;
  exports["indexOf"] = indexOf;
  exports["uncons"] = uncons;
  exports["StringLike"] = StringLike;
  exports["anyChar"] = anyChar;
  exports["satisfy"] = satisfy;
  exports["stringLikeString"] = stringLikeString;
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode = PS["Data.Char.Unicode"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isHexDigit))("hex digit");
  };
  exports["hexDigit"] = hexDigit;
})(PS["Text.Parsing.Parser.Token"] = PS["Text.Parsing.Parser.Token"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_Int = PS["Network.Ethereum.Web3.Solidity.Int"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Solidity_Vector = PS["Network.Ethereum.Web3.Solidity.Vector"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Token = PS["Text.Parsing.Parser.Token"];        
  var ABIEncode = function (toDataBuilder) {
      this.toDataBuilder = toDataBuilder;
  };
  var ABIDecode = function (fromDataParser) {
      this.fromDataParser = fromDataParser;
  };
  var uInt256HexBuilder = function (x) {
      var v = Network_Ethereum_Core_HexString.toSignedHexString(x);
      return Network_Ethereum_Core_HexString.padLeft(v.value1);
  };
  var toDataBuilder = function (dict) {
      return dict.toDataBuilder;
  };
  var toBool = function (bn) {
      return !Data_Eq.eq(Network_Ethereum_Core_BigNumber.eqBigNumber)(bn)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber));
  };
  var take = function (dictMonad) {
      return function (n) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(function ($41) {
              return Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString(Data_String.fromCharArray($41)));
          })(Data_Unfoldable.replicateA(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(n)(Text_Parsing_Parser_Token.hexDigit(dictMonad)));
      };
  };
  var uInt256HexParser = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toBigNumber)(take(dictMonad)(64));
  };
  var int256HexParser = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toBigNumberFromSignedHexString)(take(dictMonad)(64));
  };
  var int256HexBuilder = function ($copy_x) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(x) {
          var $33 = Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(x)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber));
          if ($33) {
              $copy_x = Network_Ethereum_Core_BigNumber.toTwosComplement(x);
              return;
          };
          $tco_done = true;
          return Network_Ethereum_Core_HexString.padLeftSigned(Network_Ethereum_Core_HexString.toSignedHexString(x));
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_x);
      };
      return $tco_result;
  };
  var fromDataParser = function (dict) {
      return dict.fromDataParser;
  };
  var bytesDecode = function (s) {
      return Data_Maybe.fromJust()(Data_Function.flip(Data_ByteString.fromString)(Node_Encoding.Hex.value)(s));
  };
  var bytesBuilder = function ($43) {
      return Network_Ethereum_Core_HexString.padRight(Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString(Data_Function.flip(Data_ByteString.toString)(Node_Encoding.Hex.value)($43))));
  };
  var abiEncodeUint = function (dictIntSize) {
      return new ABIEncode(function (a) {
          return uInt256HexBuilder(Network_Ethereum_Web3_Solidity_UInt.unUIntN(dictIntSize.KnownSize0())(a));
      });
  };
  var abiEncodeInt = new ABIEncode(function ($45) {
      return int256HexBuilder(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])($45));
  });
  var abiEncodeBytesN = function (dictByteSize) {
      return new ABIEncode(function (bs) {
          return bytesBuilder(Network_Ethereum_Web3_Solidity_Bytes.unBytesN(dictByteSize.KnownSize0())(bs));
      });
  };                                                     
  var abiEncodeAddress = new ABIEncode(function (addr) {
      return Network_Ethereum_Core_HexString.padLeft(Network_Ethereum_Core_Signatures.unAddress(addr));
  });
  var abiDecodeUint = function (dictIntSize) {
      return new ABIDecode((function () {
          var msg = function (n) {
              var size = Network_Ethereum_Web3_Solidity_Size.sizeVal(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value);
              return "Couldn't parse as uint" + (Data_Show.show(Data_Show.showInt)(size) + (" : " + Data_Show.show(Network_Ethereum_Core_BigNumber.showBigNumber)(n)));
          };
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(uInt256HexParser(Data_Identity.monadIdentity))(function (v) {
              return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(msg(v)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value)(v));
          });
      })());
  };                                                                                                                                                                                                               
  var abiDecodeBytesN = function (dictByteSize) {
      return new ABIDecode((function () {
          var len = Network_Ethereum_Web3_Solidity_Size.sizeVal(dictByteSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value);
          var zeroBytes = Network_Ethereum_Core_HexString.getPadLength(len * 2 | 0);
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(take(Data_Identity.monadIdentity)(len * 2 | 0))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(take(Data_Identity.monadIdentity)(zeroBytes))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Network_Ethereum_Web3_Solidity_Bytes.update(dictByteSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Bytes.proxyBytesN(dictByteSize.KnownSize0()))(bytesDecode(Network_Ethereum_Core_HexString.unHex(v))));
              });
          });
      })());
  };
  var abiDecodeBool = new ABIDecode(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(toBool)(uInt256HexParser(Data_Identity.monadIdentity)));
  var abiDecodeArray = function (dictABIDecode) {
      return new ABIDecode(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Network_Ethereum_Core_BigNumber.unsafeToInt)(uInt256HexParser(Data_Identity.monadIdentity)))(function (v) {
          return Data_Unfoldable.replicateA(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(v)(fromDataParser(dictABIDecode));
      }));
  };
  var abiDecodeAlgebra = new ABIDecode(int256HexParser(Data_Identity.monadIdentity));
  var abiDecodeBytesD = new ABIDecode(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Network_Ethereum_Core_BigNumber.unsafeToInt)(fromDataParser(abiDecodeAlgebra)))(function (v) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($48) {
          return bytesDecode(Network_Ethereum_Core_HexString.unHex($48));
      })(take(Data_Identity.monadIdentity)(v * 2 | 0));
  }));                                                                                                                                                                                
  var abiDecodeAddress = new ABIDecode(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(take(Data_Identity.monadIdentity)(24))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Network_Ethereum_Core_Signatures.mkAddress)(take(Data_Identity.monadIdentity)(40)))(function (v1) {
          return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Address is 20 bytes, receieved more"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(v1);
      });
  }));
  exports["fromDataParser"] = fromDataParser;
  exports["toDataBuilder"] = toDataBuilder;
  exports["ABIEncode"] = ABIEncode;
  exports["ABIDecode"] = ABIDecode;
  exports["bytesBuilder"] = bytesBuilder;
  exports["bytesDecode"] = bytesDecode;
  exports["int256HexBuilder"] = int256HexBuilder;
  exports["uInt256HexBuilder"] = uInt256HexBuilder;
  exports["int256HexParser"] = int256HexParser;
  exports["uInt256HexParser"] = uInt256HexParser;
  exports["toBool"] = toBool;
  exports["take"] = take;
  exports["abiDecodeAlgebra"] = abiDecodeAlgebra;
  exports["abiDecodeBool"] = abiDecodeBool;
  exports["abiEncodeInt"] = abiEncodeInt;
  exports["abiEncodeAddress"] = abiEncodeAddress;
  exports["abiDecodeAddress"] = abiDecodeAddress;
  exports["abiDecodeBytesD"] = abiDecodeBytesD;
  exports["abiEncodeBytesN"] = abiEncodeBytesN;
  exports["abiDecodeBytesN"] = abiDecodeBytesN;
  exports["abiDecodeArray"] = abiDecodeArray;
  exports["abiEncodeUint"] = abiEncodeUint;
  exports["abiDecodeUint"] = abiDecodeUint;
})(PS["Network.Ethereum.Web3.Solidity.AbiEncoding"] = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_Int = PS["Network.Ethereum.Web3.Solidity.Int"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Solidity_Vector = PS["Network.Ethereum.Web3.Solidity.Vector"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var EncodingType = function (isDynamic, typeName) {
      this.isDynamic = isDynamic;
      this.typeName = typeName;
  };
  var typeName = function (dict) {
      return dict.typeName;
  };
  var isDynamic = function (dict) {
      return dict.isDynamic;
  };
  var encodingTypeUIntN = function (dictIntSize) {
      return new EncodingType(Data_Function["const"](false), Data_Function["const"]("uint" + Data_Show.show(Data_Show.showInt)(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value))));
  };                                                                                                   
  var encodingTypeBytesD = new EncodingType(Data_Function["const"](true), Data_Function["const"]("bytes[]"));
  var encodingTypeBytes = function (dictKnownSize) {
      return new EncodingType(Data_Function["const"](false), (function () {
          var n = Data_Show.show(Data_Show.showInt)(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value));
          return Data_Function["const"]("bytes[" + (n + "]"));
      })());
  };
  var encodingTypeBoolean = new EncodingType(Data_Function["const"](false), Data_Function["const"]("bool")); 
  var encodingTypeArray = function (dictEncodingType) {
      return new EncodingType(Data_Function["const"](true), Data_Function["const"]("[]"));
  };
  var encodingTypeAddress = new EncodingType(Data_Function["const"](false), Data_Function["const"]("address"));
  exports["EncodingType"] = EncodingType;
  exports["typeName"] = typeName;
  exports["isDynamic"] = isDynamic;
  exports["encodingTypeBoolean"] = encodingTypeBoolean;
  exports["encodingTypeUIntN"] = encodingTypeUIntN;
  exports["encodingTypeAddress"] = encodingTypeAddress;
  exports["encodingTypeArray"] = encodingTypeArray;
  exports["encodingTypeBytes"] = encodingTypeBytes;
  exports["encodingTypeBytesD"] = encodingTypeBytesD;
})(PS["Network.Ethereum.Web3.Solidity.EncodingType"] = PS["Network.Ethereum.Web3.Solidity.EncodingType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Record = PS["Data.Record"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];        
  var EncodedValue = (function () {
      function EncodedValue(value0) {
          this.value0 = value0;
      };
      EncodedValue.create = function (value0) {
          return new EncodedValue(value0);
      };
      return EncodedValue;
  })();
  var GenericABIEncode = function (genericToDataBuilder) {
      this.genericToDataBuilder = genericToDataBuilder;
  };
  var GenericABIDecode = function (genericFromDataParser) {
      this.genericFromDataParser = genericFromDataParser;
  };
  var ABIData = function (_serialize) {
      this._serialize = _serialize;
  };
  var genericToDataBuilder = function (dict) {
      return dict.genericToDataBuilder;
  };
  var genericFromDataParser = function (dict) {
      return dict.genericFromDataParser;
  };
  var genericABIEncode = function (dictGeneric) {
      return function (dictGenericABIEncode) {
          return function ($116) {
              return genericToDataBuilder(dictGenericABIEncode)(Data_Generic_Rep.from(dictGeneric)($116));
          };
      };
  };
  var genericABIDecode = function (dictGeneric) {
      return function (dictGenericABIDecode) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.to(dictGeneric))(genericFromDataParser(dictGenericABIDecode));
      };
  };
  var genericFromData = function (dictGeneric) {
      return function (dictGenericABIDecode) {
          return function ($117) {
              return Data_Function.flip(Text_Parsing_Parser.runParser)(genericABIDecode(dictGeneric)(dictGenericABIDecode))(Network_Ethereum_Core_HexString.unHex($117));
          };
      };
  };
  var eqEncodedValue = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.order === v1.value0.order;
      };
  });
  var ordEncodedValue = new Data_Ord.Ord(function () {
      return eqEncodedValue;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.value0.order)(v1.value0.order);
      };
  });
  var dParser = function (dictABIDecode) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Network_Ethereum_Core_BigNumber.unsafeToInt)(Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAlgebra)))(function (v) {
          return Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(Data_Identity.monadIdentity)))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Network_Ethereum_Web3_Solidity_AbiEncoding.take(Data_Identity.monadIdentity)((v * 2 | 0) - (v1.value1.column - 1 | 0) | 0))(function (v2) {
                  return Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(dictABIDecode);
              });
          }));
      });
  };
  var factorParser = function (dictABIDecode) {
      return function (dictEncodingType) {
          if (!Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value)) {
              return Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(dictABIDecode);
          };
          if (Data_Boolean.otherwise) {
              return dParser(dictABIDecode);
          };
          throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 169, column 1 - line 169, column 76: " + [  ]);
      };
  };
  var inductiveAbiDecode = function (dictEncodingType) {
      return function (dictABIDecode) {
          return function (dictGenericABIDecode) {
              return new GenericABIDecode(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Product.create)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Argument)(factorParser(dictABIDecode)(dictEncodingType))))(genericFromDataParser(dictGenericABIDecode)));
          };
      };
  };
  var combineEncodedValues = function (encodings) {
      var headsOffset = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return acc + (Network_Ethereum_Core_HexString.hexLength(v.value0.encoding) / 2 | 0) | 0;
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return acc + 32 | 0;
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 86, column 51 - line 89, column 29: " + [ v.value0.offset.constructor.name ]);
          };
      })(0)(encodings);
      var adjust = function (n) {
          return Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return new EncodedValue((function () {
                  var $87 = {};
                  for (var $88 in v.value0) {
                      if ({}.hasOwnProperty.call(v.value0, $88)) {
                          $87[$88] = v["value0"][$88];
                      };
                  };
                  $87.offset = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Semiring.add(Data_Semiring.semiringInt)(n))(v.value0.offset);
                  return $87;
              })());
          });
      };
      var addTailOffsets = function ($copy_init) {
          return function ($copy_acc) {
              return function ($copy_es) {
                  var $tco_var_init = $copy_init;
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(init, acc, es) {
                      var v = Data_Array.uncons(es);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Array.reverse(acc);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          if (v.value0.head.value0.offset instanceof Data_Maybe.Nothing) {
                              $tco_var_init = init;
                              $tco_var_acc = Data_Array.cons(v.value0.head)(acc);
                              $copy_es = v.value0.tail;
                              return;
                          };
                          if (v.value0.head.value0.offset instanceof Data_Maybe.Just) {
                              $tco_var_init = init;
                              $tco_var_acc = Data_Array.cons(v.value0.head)(acc);
                              $copy_es = adjust(Network_Ethereum_Core_HexString.hexLength(v.value0.head.value0.encoding) / 2 | 0)(v.value0.tail);
                              return;
                          };
                          throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 82, column 12 - line 84, column 98: " + [ v.value0.head.value0.offset.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 78, column 34 - line 84, column 98: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_init, $tco_var_acc, $copy_es);
                  };
                  return $tco_result;
              };
          };
      };
      var sortedEs = adjust(headsOffset)(Data_Array.sort(ordEncodedValue)(encodings));
      var encodings$prime = addTailOffsets(headsOffset)([  ])(sortedEs);
      var tails = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return acc;
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(v.value0.encoding);
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 69, column 50 - line 71, column 54: " + [ v.value0.offset.constructor.name ]);
          };
      })(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq))(encodings$prime);
      var heads = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(v.value0.encoding);
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeInt)(v.value0.offset.value0));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic line 65, column 50 - line 67, column 59: " + [ v.value0.offset.constructor.name ]);
          };
      })(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq))(encodings$prime);
      return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(heads)(tails);
  };                                                                                                                                                                              
  var baseAbiDecode = function (dictEncodingType) {
      return function (dictABIDecode) {
          return new GenericABIDecode(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Argument)(factorParser(dictABIDecode)(dictEncodingType)));
      };
  };
  var abiDecodeConstructor = function (dictGenericABIDecode) {
      return new GenericABIDecode(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(genericFromDataParser(dictGenericABIDecode)));
  };
  var abiDataBaseNull = new ABIData(function (encoded) {
      return function (v) {
          return encoded;
      };
  });
  var abiDataBase = function (dictEncodingType) {
      return function (dictABIEncode) {
          return new ABIData(function (encoded) {
              return function (v) {
                  var staticEncoding = new EncodedValue({
                      encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v),
                      offset: Data_Maybe.Nothing.value,
                      order: 1 + Data_Array.length(encoded) | 0
                  });
                  var dynEncoding = new EncodedValue({
                      encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v),
                      offset: new Data_Maybe.Just(0),
                      order: 1 + Data_Array.length(encoded) | 0
                  });
                  var $109 = Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value);
                  if ($109) {
                      return Data_Array.cons(dynEncoding)(encoded);
                  };
                  return Data_Array.cons(staticEncoding)(encoded);
              };
          });
      };
  };
  var _serialize = function (dict) {
      return dict._serialize;
  };
  var abiDataInductive = function (dictEncodingType) {
      return function (dictABIEncode) {
          return function (dictABIData) {
              return new ABIData(function (encoded) {
                  return function (v) {
                      var staticEncoding = new EncodedValue({
                          encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v.value0),
                          offset: Data_Maybe.Nothing.value,
                          order: 1 + Data_Array.length(encoded) | 0
                      });
                      var dynEncoding = new EncodedValue({
                          encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v.value0),
                          offset: new Data_Maybe.Just(0),
                          order: 1 + Data_Array.length(encoded) | 0
                      });
                      var $112 = Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value);
                      if ($112) {
                          return _serialize(dictABIData)(Data_Array.cons(dynEncoding)(encoded))(v.value1);
                      };
                      return _serialize(dictABIData)(Data_Array.cons(staticEncoding)(encoded))(v.value1);
                  };
              });
          };
      };
  };
  var abiEncodeConstructor = function (dictABIData) {
      return new GenericABIEncode(function (v) {
          return combineEncodedValues(_serialize(dictABIData)([  ])(v));
      });
  };
  exports["GenericABIEncode"] = GenericABIEncode;
  exports["GenericABIDecode"] = GenericABIDecode;
  exports["ABIData"] = ABIData;
  exports["_serialize"] = _serialize;
  exports["genericFromDataParser"] = genericFromDataParser;
  exports["genericToDataBuilder"] = genericToDataBuilder;
  exports["genericABIEncode"] = genericABIEncode;
  exports["genericABIDecode"] = genericABIDecode;
  exports["genericFromData"] = genericFromData;
  exports["eqEncodedValue"] = eqEncodedValue;
  exports["ordEncodedValue"] = ordEncodedValue;
  exports["abiDataBaseNull"] = abiDataBaseNull;
  exports["abiDataBase"] = abiDataBase;
  exports["abiDataInductive"] = abiDataInductive;
  exports["abiEncodeConstructor"] = abiEncodeConstructor;
  exports["baseAbiDecode"] = baseAbiDecode;
  exports["inductiveAbiDecode"] = inductiveAbiDecode;
  exports["abiDecodeConstructor"] = abiDecodeConstructor;
})(PS["Network.Ethereum.Web3.Solidity.Generic"] = PS["Network.Ethereum.Web3.Solidity.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Reader = PS["Control.Monad.Reader"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = PS["Network.Ethereum.Core.Keccak256"];
  var Network_Ethereum_Types = PS["Network.Ethereum.Types"];
  var Network_Ethereum_Web3_Api = PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row_Effect_Equality = PS["Type.Row.Effect.Equality"];
  var CallMethod = function (call) {
      this.call = call;
  };
  var call = function (dict) {
      return dict.call;
  };
  var _call = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictGenericABIEncode) {
              return function (dictGeneric1) {
                  return function (dictGenericABIDecode) {
                      return function (txOptions) {
                          return function (cursor) {
                              return function (dat) {
                                  var txdata = function (d) {
                                      return Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._data(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(d))(txOptions);
                                  };
                                  var sig = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                  var sel = Network_Ethereum_Core_Keccak256.toSelector(sig);
                                  var fullData = Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(Data_Functor_Tagged.untagged(dat)));
                                  return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Network_Ethereum_Web3_Api.eth_call(txdata(Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(Data_Functor_Tagged.untagged(dat)))))(cursor))(function (v) {
                                      var v1 = Network_Ethereum_Web3_Solidity_Generic.genericFromData(dictGeneric1)(dictGenericABIDecode)(v);
                                      if (v1 instanceof Data_Either.Left) {
                                          var $35 = Data_Eq.eq(Network_Ethereum_Core_HexString.hexStringEq)(v)(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq));
                                          if ($35) {
                                              return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(Data_Either.Left.create(new Network_Ethereum_Web3_Types_Types.NullStorageError({
                                                  signature: sig,
                                                  _data: fullData
                                              })));
                                          };
                                          return Network_Ethereum_Web3_Types_Types.throwWeb3(Control_Monad_Eff_Exception.error(Data_Show.show(Text_Parsing_Parser.showParseError)(v1.value0)));
                                      };
                                      if (v1 instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(new Data_Either.Right(v1.value0));
                                      };
                                      throw new Error("Failed pattern match at Network.Ethereum.Web3.Contract line 147, column 5 - line 154, column 32: " + [ v1.constructor.name ]);
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var callmethodAbiEncode = function (dictGeneric) {
      return function (dictGenericABIEncode) {
          return function (dictGeneric1) {
              return function (dictGenericABIDecode) {
                  return new CallMethod(function (dictIsSymbol) {
                      return _call(dictIsSymbol)(dictGeneric)(dictGenericABIEncode)(dictGeneric1)(dictGenericABIDecode);
                  });
              };
          };
      };
  };
  exports["CallMethod"] = CallMethod;
  exports["call"] = call;
  exports["callmethodAbiEncode"] = callmethodAbiEncode;
})(PS["Network.Ethereum.Web3.Contract"] = PS["Network.Ethereum.Web3.Contract"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Tuple6 = (function () {
      function Tuple6(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      Tuple6.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new Tuple6(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return Tuple6;
  })();
  var Tuple3 = (function () {
      function Tuple3(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Tuple3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Tuple3(value0, value1, value2);
              };
          };
      };
      return Tuple3;
  })();
  var Tuple2 = (function () {
      function Tuple2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple2.create = function (value0) {
          return function (value1) {
              return new Tuple2(value0, value1);
          };
      };
      return Tuple2;
  })();
  var Tuple10 = (function () {
      function Tuple10(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
          this.value7 = value7;
          this.value8 = value8;
          this.value9 = value9;
      };
      Tuple10.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return function (value7) {
                                      return function (value8) {
                                          return function (value9) {
                                              return new Tuple10(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
      return Tuple10;
  })();
  var Tuple0 = (function () {
      function Tuple0() {

      };
      Tuple0.value = new Tuple0();
      return Tuple0;
  })();
  var unTuple1 = function (v) {
      return v;
  };
  var genericTuple6 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, new Data_Generic_Rep.Product(x.value4, x.value5)))));
  }, function (x) {
      return new Tuple6(x.value0, x.value1.value0, x.value1.value1.value0, x.value1.value1.value1.value0, x.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1);
  });
  var genericTuple3 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
  }, function (x) {
      return new Tuple3(x.value0, x.value1.value0, x.value1.value1);
  });
  var genericTuple2 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, x.value1);
  }, function (x) {
      return new Tuple2(x.value0, x.value1);
  });
  var genericTuple10 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, new Data_Generic_Rep.Product(x.value4, new Data_Generic_Rep.Product(x.value5, new Data_Generic_Rep.Product(x.value6, new Data_Generic_Rep.Product(x.value7, new Data_Generic_Rep.Product(x.value8, x.value9)))))))));
  }, function (x) {
      return new Tuple10(x.value0, x.value1.value0, x.value1.value1.value0, x.value1.value1.value1.value0, x.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1.value1.value1.value1.value0, x.value1.value1.value1.value1.value1.value1.value1.value1.value1);
  });
  var genericTuple1 = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericTuple0 = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Tuple0.value;
  });
  exports["Tuple0"] = Tuple0;
  exports["unTuple1"] = unTuple1;
  exports["Tuple2"] = Tuple2;
  exports["Tuple3"] = Tuple3;
  exports["Tuple6"] = Tuple6;
  exports["Tuple10"] = Tuple10;
  exports["genericTuple0"] = genericTuple0;
  exports["genericTuple1"] = genericTuple1;
  exports["genericTuple2"] = genericTuple2;
  exports["genericTuple3"] = genericTuple3;
  exports["genericTuple6"] = genericTuple6;
  exports["genericTuple10"] = genericTuple10;
})(PS["Network.Ethereum.Web3.Solidity.Tuple"] = PS["Network.Ethereum.Web3.Solidity.Tuple"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        xhr.onerror = function () {
          errback(new Error("AJAX request failed: " + options.method + " " + options.url));
        };
        xhr.onload = function () {
          callback({
            status: xhr.status,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            response: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (/* error */) {
          return function (cancelErrback, cancelCallback) {
            try {
              xhr.abort();
            } catch (e) {
              return cancelErrback(e);
            }
            return cancelCallback();
          };
        };
      };
    };
  }();
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)($0);
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 48, column 1 - line 48, column 61: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                                                                                                                                        
  var responsableString = new Respondable(Data_Foreign.readString, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));                               
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["responseTypeToString"] = responseTypeToString;
  exports["Respondable"] = Respondable;
  exports["responseType"] = responseType;
  exports["fromResponse"] = fromResponse;
  exports["responsableString"] = responsableString;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 29, column 1 - line 29, column 46: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 24, column 1 - line 24, column 45: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var showStatusCode = new Data_Show.Show(function (v) {
      return "(StatusCode " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var eqStatusCode = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  exports["eqStatusCode"] = eqStatusCode;
  exports["showStatusCode"] = showStatusCode;
})(PS["Network.HTTP.StatusCode"] = PS["Network.HTTP.StatusCode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Compat = PS["Control.Monad.Aff.Compat"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
              var requestSettings = (function () {
                  var v = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(v.value0.value0, new Data_Maybe.Just(v.value0.value1));
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 250, column 21 - line 252, column 49: " + [ v.constructor.name ]);
              })();
              var parseJSON = function ($98) {
                  return Data_Either.either(function ($99) {
                      return Data_Foreign.fail(Data_Foreign.JSONError.create($99));
                  })(function ($100) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign($100));
                  })(Data_Argonaut_Parser.jsonParser($98));
              };
              var fromResponse$prime = (function () {
                  var v = Data_Tuple.snd(responseSettings);
                  if (v instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(parseJSON)(Data_Foreign.readString));
                  };
                  return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
              })();
              var addHeader = function (mh) {
                  return function (hs) {
                      if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                          return Data_Array.snoc(hs)(mh.value0);
                      };
                      return hs;
                  };
              };
              var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
              var req$prime = {
                  method: Data_HTTP_Method.print(req.method),
                  url: req.url,
                  headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                      return {
                          field: Network_HTTP_RequestHeader.requestHeaderName(h),
                          value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                      };
                  })(headers),
                  content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)),
                  responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)),
                  username: Data_Nullable.toNullable(req.username),
                  password: Data_Nullable.toNullable(req.password),
                  withCredentials: req.withCredentials
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Compat.fromEffFnAff($foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime)))(function (v) {
                  var v1 = Data_Functor.map(Data_Either.functorEither)(function (v2) {
                      var $68 = {};
                      for (var $69 in v) {
                          if ({}.hasOwnProperty.call(v, $69)) {
                              $68[$69] = v[$69];
                          };
                      };
                      $68.response = v2;
                      return $68;
                  })(Control_Monad_Except.runExcept(fromResponse$prime(v.response)));
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v1.value0)));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 232, column 3 - line 234, column 28: " + [ v1.constructor.name ]);
              });
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $77 = {};
              for (var $78 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $78)) {
                      $77[$78] = defaultRequest[$78];
                  };
              };
              $77.url = u;
              return $77;
          })());
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["affjax"] = affjax;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
    "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Process"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Data_StrMap = PS["Data.StrMap"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  exports["exit"] = $foreign.exit;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var usage = function (msg) {
      return function (y) {
          return y.usage(msg);
      };
  };
  var semigroupYargsSetup = new Data_Semigroup.Semigroup(function (s1) {
      return function (s2) {
          return function (y) {
              return s2(s1(y));
          };
      };
  });
  var help = function (key) {
      return function (desc) {
          return function (y) {
              return y.help(key, desc);
          };
      };
  };
  var defaultHelp = function (y) {
      return y.help();
  };
  exports["usage"] = usage;
  exports["help"] = help;
  exports["defaultHelp"] = defaultHelp;
  exports["semigroupYargsSetup"] = semigroupYargsSetup;
})(PS["Node.Yargs.Setup"] = PS["Node.Yargs.Setup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Prelude = PS["Prelude"];        
  var mToAff = function (err) {
      return function (a) {
          return Data_Maybe.fromMaybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(err)))(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(a));
      };
  };
  var exceptToAff = function (e) {
      return Data_Either.either(function (err) {
          return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Unable to convert Except to Aff: " + Global_Unsafe.unsafeStringify(err)));
      })(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(Control_Monad_Except.runExcept(e));
  };
  var eToAff = function (dictShow) {
      return function (e) {
          if (e instanceof Data_Either.Right) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(e.value0);
          };
          if (e instanceof Data_Either.Left) {
              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(Data_Show.show(dictShow)(e.value0)));
          };
          throw new Error("Failed pattern match at SV.Prelude line 31, column 12 - line 33, column 47: " + [ e.constructor.name ]);
      };
  };
  exports["eToAff"] = eToAff;
  exports["exceptToAff"] = exceptToAff;
  exports["mToAff"] = mToAff;
})(PS["SV.Prelude"] = PS["SV.Prelude"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var SV_Prelude = PS["SV.Prelude"];        
  var mkFErr = function ($0) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton(Data_Foreign.ForeignError.create($0)));
  };
  exports["mkFErr"] = mkFErr;
})(PS["SecureVote.Utils.Json"] = PS["SecureVote.Utils.Json"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Utils_Json = PS["SecureVote.Utils.Json"];
  var Simple_JSON = PS["Simple.JSON"];
  var rfNever = new Simple_JSON.ReadForeign(function (v) {
      return SecureVote_Utils_Json.mkFErr("Cannot decode 'Never' value");
  });
  exports["rfNever"] = rfNever;
})(PS["SV.Light.Types.Never"] = PS["SV.Light.Types.Never"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Record_ShowRecord = PS["Data.Record.ShowRecord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Debug_Trace = PS["Debug.Trace"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Solidity_Sizes = PS["Network.Ethereum.Web3.Solidity.Sizes"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var SV_Light_Types_Never = PS["SV.Light.Types.Never"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Utils_Json = PS["SecureVote.Utils.Json"];
  var Simple_JSON = PS["Simple.JSON"];
  var Type_Row = PS["Type.Row"];        
  var RangeVotingPlusMinus3 = (function () {
      function RangeVotingPlusMinus3() {

      };
      RangeVotingPlusMinus3.value = new RangeVotingPlusMinus3();
      return RangeVotingPlusMinus3;
  })();
  var SimpleOption = function (x) {
      return x;
  };
  var OptsSimple = (function () {
      function OptsSimple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OptsSimple.create = function (value0) {
          return function (value1) {
              return new OptsSimple(value0, value1);
          };
      };
      return OptsSimple;
  })();
  var OptsBinary = (function () {
      function OptsBinary() {

      };
      OptsBinary.value = new OptsBinary();
      return OptsBinary;
  })();
  var OptsPetition = (function () {
      function OptsPetition() {

      };
      OptsPetition.value = new OptsPetition();
      return OptsPetition;
  })();
  var BVer01 = (function () {
      function BVer01(value0) {
          this.value0 = value0;
      };
      BVer01.create = function (value0) {
          return new BVer01(value0);
      };
      return BVer01;
  })();
  var BVer02 = (function () {
      function BVer02(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BVer02.create = function (value0) {
          return function (value1) {
              return new BVer02(value0, value1);
          };
      };
      return BVer02;
  })();
  var reqNothing = function (name) {
      return function (m) {
          var $49 = Data_Maybe.isNothing(m);
          if ($49) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit);
          };
          return SecureVote_Utils_Json.mkFErr("Expected nothing for `" + (name + ("` but got: " + Global_Unsafe.unsafeStringify(m))));
      };
  };
  var readSimpleOption = new Simple_JSON.ReadForeign(function (a) {
      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(SimpleOption)(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "optionDesc";
      }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "optionTitle";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(a));
  });
  var readFOptsOuter = new Simple_JSON.ReadForeign(function (a) {
      var reqNothing$prime = reqNothing("options");
      var opt01Conv = function (options) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readArray(readSimpleOption))(options))(function (v) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new OptsSimple(RangeVotingPlusMinus3.value, v));
          });
      };
      var mkOptsOuter = function (ver) {
          return function (opts) {
              if (ver === 1) {
                  return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(opt01Conv)(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readForeign))(Data_Maybe.fromMaybe(SecureVote_Utils_Json.mkFErr("OptionsV01 expected SimpleOptions but got Nothing"))(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(opts))));
              };
              if (ver === 2) {
                  return Control_Apply.applySecond(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(reqNothing$prime(opts))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(OptsBinary.value));
              };
              if (ver === 3) {
                  return Control_Apply.applySecond(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(reqNothing$prime(opts))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(OptsPetition.value));
              };
              return SecureVote_Utils_Json.mkFErr("Invalid OptionsVersion " + Data_Show.show(Data_Show.showInt)(ver));
          };
      };
      var readOptsBV1 = function (a1) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "options";
          }))(Simple_JSON.readMaybe(Simple_JSON.readForeign))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "optionsVersion";
          }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(a1))(function (v) {
              return mkOptsOuter(v.optionsVersion)(v.options);
          });
      };
      var readOptsBV2 = function (a1) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "optionsInner";
          }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "aux";
          }))(Simple_JSON.readMaybe(Simple_JSON.readForeign))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "options";
          }))(Simple_JSON.readMaybe(Simple_JSON.readForeign))(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "optionsVersion";
          }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(a1))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reqNothing("aux")(v.optionsInner.aux))(function () {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(mkOptsOuter(v.optionsVersion)(v.optionsInner.options))(function (v1) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v1);
                  });
              });
          });
      };
      return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(readOptsBV1(a))(function (e) {
          return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(readOptsBV2(a))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(e));
      });
  });
  var readFBallotSpec = new Simple_JSON.ReadForeign(function (a) {
      var strToHexIfJust = Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value))(function ($100) {
          return Data_Maybe.fromMaybe(SecureVote_Utils_Json.mkFErr("Cannot convert encPK to HexString"))(Data_Functor.map(Data_Maybe.functorMaybe)(function ($101) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Just.create($101));
          })(Network_Ethereum_Core_HexString.mkHexString($100)));
      });
      var b02Conv = function (v) {
          return function (v1) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "ballotTitle";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "discussionLink";
              }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "encryptionPK";
              }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "longDesc";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "shortDesc";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "subgroup";
              }))(Simple_JSON.readMaybe(SV_Light_Types_Never.rfNever))(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(v.ballotInner))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(strToHexIfJust(v2.encryptionPK))(function (v3) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new BVer02((function () {
                          var $59 = {};
                          for (var $60 in v2) {
                              if ({}.hasOwnProperty.call(v2, $60)) {
                                  $59[$60] = v2[$60];
                              };
                          };
                          $59.encryptionPK = v3;
                          return $59;
                      })(), v1));
                  });
              });
          };
      };
      var b01Conv = function (b) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Maybe.fromMaybe(SecureVote_Utils_Json.mkFErr("Cannot convert erc20Addr to addr"))(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkAddress)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_HexString.mkHexString)(b.erc20Addr)))))(function (v) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(strToHexIfJust(b.encryptionPK))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(BVer01.create((function () {
                      var $65 = {};
                      for (var $66 in b) {
                          if ({}.hasOwnProperty.call(b, $66)) {
                              $65[$66] = b[$66];
                          };
                      };
                      $65.encryptionPK = v1;
                      $65.erc20Addr = v;
                      return $65;
                  })()));
              });
          });
      };
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "ballotInner";
      }))(Simple_JSON.readForeign)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "ballotVersion";
      }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(a))(function (v) {
          if (v.ballotVersion === 1) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(b01Conv)(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "ballotTitle";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "binding";
              }))(Simple_JSON.readBoolean)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "discussionLink";
              }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "encryptionPK";
              }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "endTime";
              }))(Simple_JSON.readInt)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "erc20Addr";
              }))(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "longDesc";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "options";
              }))(readFOptsOuter)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "shortDesc";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "startTime";
              }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(v.ballotInner));
          };
          if (v.ballotVersion === 2) {
              return Control_Bind.join(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(b02Conv)(Simple_JSON["read'"](Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "ballotInner";
              }))(Simple_JSON.readForeign)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "optionsVersion";
              }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)(Type_Row.rowLacks()()()(Type_Row.rowLacking))())(Type_Row.rowLacks()()()(Type_Row.rowLacking))()))(a)))(Simple_JSON["read'"](readFOptsOuter)(a)));
          };
          return SecureVote_Utils_Json.mkFErr("Invalid BallotSpec: " + Global_Unsafe.unsafeStringify(a));
      });
  });
  var ntSimpleOption = new Data_Newtype.Newtype(function (n) {
      return n;
  }, SimpleOption);
  exports["BVer01"] = BVer01;
  exports["BVer02"] = BVer02;
  exports["OptsSimple"] = OptsSimple;
  exports["OptsBinary"] = OptsBinary;
  exports["OptsPetition"] = OptsPetition;
  exports["SimpleOption"] = SimpleOption;
  exports["RangeVotingPlusMinus3"] = RangeVotingPlusMinus3;
  exports["reqNothing"] = reqNothing;
  exports["ntSimpleOption"] = ntSimpleOption;
  exports["readFBallotSpec"] = readFBallotSpec;
  exports["readFOptsOuter"] = readFOptsOuter;
  exports["readSimpleOption"] = readSimpleOption;
})(PS["SV.Light.Types.Ballot"] = PS["SV.Light.Types.Ballot"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];        
  var uint256Px = Network_Ethereum_Web3_Solidity_Size.DLProxy.value;
  exports["uint256Px"] = uint256Px;
})(PS["SV.Light.Types.Eth"] = PS["SV.Light.Types.Eth"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Map = PS["Data.Map"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var SV_Light_Types_Ballot = PS["SV.Light.Types.Ballot"];
  var SV_Light_Types_BallotBox = PS["SV.Light.Types.BallotBox"];
  var SV_Light_Types_Eth = PS["SV.Light.Types.Eth"];
  var SV_Prelude = PS["SV.Prelude"];        
  var mkBallotInfo = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      return function (v5) {
                          return {
                              ballotId: v,
                              bHash: v1,
                              startTime: v2,
                              endTime: v3,
                              encSecKey: v4,
                              nVotesCast: v5
                          };
                      };
                  };
              };
          };
      };
  };
  exports["mkBallotInfo"] = mkBallotInfo;
})(PS["SV.Light.Types.RunBallot"] = PS["SV.Light.Types.RunBallot"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Decimal = PS["Data.Decimal"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Prelude = PS["SV.Prelude"];        
  var bnToStr = Network_Ethereum_Core_BigNumber.toString(Data_Int.decimal);
  var bnToDec = function ($1) {
      return Data_Maybe.fromJust()(Data_Decimal.fromString(bnToStr($1)));
  };
  var bnFromMDef0 = Data_Maybe.fromMaybe(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0));
  exports["bnFromMDef0"] = bnFromMDef0;
  exports["bnToStr"] = bnToStr;
  exports["bnToDec"] = bnToDec;
})(PS["SV.Utils.BigNumber"] = PS["SV.Utils.BigNumber"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SV_Utils_BigNumber = PS["SV.Utils.BigNumber"];        
  var countBinary = function (weightedBallots) {
      var resultsMap = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
          return function (m) {
              return Data_Map.alter(Network_Ethereum_Core_HexString.hexStringOrd)(function ($12) {
                  return Data_Maybe.Just.create(Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber)(v.bal)(SV_Utils_BigNumber.bnFromMDef0($12)));
              })(v.ballot.ballot)(m);
          };
      })(Data_Map.empty)(weightedBallots);
      var nVotesMap = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
          return function (m) {
              return Data_Map.alter(Network_Ethereum_Core_HexString.hexStringOrd)(function ($13) {
                  return Data_Maybe.Just.create(1 + Data_Maybe.fromMaybe(0)($13) | 0);
              })(v.ballot.ballot)(m);
          };
      })(Data_Map.empty)(weightedBallots);
      var getVoteCount = function (matchThis) {
          return SV_Utils_BigNumber.bnFromMDef0(Data_Map.lookup(Network_Ethereum_Core_HexString.hexStringOrd)(matchThis)(resultsMap));
      };
      var getNVotes = function (matchThis) {
          return Data_Maybe.fromMaybe(0)(Data_Map.lookup(Network_Ethereum_Core_HexString.hexStringOrd)(matchThis)(nVotesMap));
      };
      var ballotYes = Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString("8000000000000000000000000000000000000000000000000000000000000000"));
      var countYes = getVoteCount(ballotYes);
      var nVotesYes = getNVotes(ballotYes);
      var ballotNo = Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString("4000000000000000000000000000000000000000000000000000000000000000"));
      var countNo = getVoteCount(ballotNo);
      var invalidCount = Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Data_Foldable.foldr(Data_Map.foldableMap)(function (c) {
          return function (sum) {
              return Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber)(c)(sum);
          };
      })(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0))(resultsMap))(countYes))(countNo);
      var nVotesNo = getNVotes(ballotNo);
      var invalidNVotes = (Data_Array.length(weightedBallots) - nVotesYes | 0) - nVotesNo | 0;
      return [ {
          name: "yes",
          count: countYes,
          nVotes: nVotesYes
      }, {
          name: "no",
          count: countNo,
          nVotes: nVotesNo
      }, {
          name: "invalid",
          count: invalidCount,
          nVotes: invalidNVotes
      } ];
  };
  exports["countBinary"] = countBinary;
})(PS["SV.Light.Counts.BinaryVote"] = PS["SV.Light.Counts.BinaryVote"] || {});
(function(exports) {
    "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SV_Utils_BigNumber = PS["SV.Utils.BigNumber"];        
  var countPetition = function (weightedBallots) {
      var signedPetition = Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString("0000000000000000000000000000000000000000000000000000000000000001"));
      var revokeBallot = Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString("0000000000000000000000000000000000000000000000000000000000000000"));
      var modBallot = function (b) {
          var $4 = Data_Eq.eq(Network_Ethereum_Core_HexString.hexStringEq)(b)(revokeBallot);
          if ($4) {
              return revokeBallot;
          };
          return signedPetition;
      };
      var nVotesMap = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
          return function (m) {
              return Data_Map.alter(Network_Ethereum_Core_HexString.hexStringOrd)(function ($13) {
                  return Data_Maybe.Just.create(1 + Data_Maybe.fromMaybe(0)($13) | 0);
              })(modBallot(v.ballot.ballot))(m);
          };
      })(Data_Map.empty)(weightedBallots);
      var resultsMap = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
          return function (m) {
              return Data_Map.alter(Network_Ethereum_Core_HexString.hexStringOrd)(function ($14) {
                  return Data_Maybe.Just.create(Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber)(v.bal)(SV_Utils_BigNumber.bnFromMDef0($14)));
              })(modBallot(v.ballot.ballot))(m);
          };
      })(Data_Map.empty)(weightedBallots);
      var getVoteCount = function (matchThis) {
          return SV_Utils_BigNumber.bnFromMDef0(Data_Map.lookup(Network_Ethereum_Core_HexString.hexStringOrd)(matchThis)(resultsMap));
      };
      var getNVotes = function (matchThis) {
          return Data_Maybe.fromMaybe(0)(Data_Map.lookup(Network_Ethereum_Core_HexString.hexStringOrd)(matchThis)(nVotesMap));
      };
      var nVotesNo = getNVotes(revokeBallot);
      var nVotesYes = getNVotes(signedPetition);
      var invalidNVotes = (Data_Array.length(weightedBallots) - nVotesYes | 0) - nVotesNo | 0;
    
      // getVoteCountNot matchThis = bnFromMDef0 $ sum $ Map.filterKeys (\k -> k /= matchThis) resultsMap
  var countYes = getVoteCount(signedPetition);
      var countNo = getVoteCount(revokeBallot);
      var invalidCount = Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Data_Foldable.foldr(Data_Map.foldableMap)(function (c) {
          return function (sum) {
              return Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber)(c)(sum);
          };
      })(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0))(resultsMap))(countYes))(countNo);
      return [ {
          name: "signed",
          count: countYes,
          nVotes: nVotesYes
      }, {
          name: "revoked",
          count: countNo,
          nVotes: nVotesNo
      }, {
          name: "invalid",
          count: invalidCount,
          nVotes: invalidNVotes
      } ];
  };
  exports["countPetition"] = countPetition;
})(PS["SV.Light.Counts.Petition"] = PS["SV.Light.Counts.Petition"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Yarn = PS["Data.String.Yarn"];
  var Prelude = PS["Prelude"];        
  var padLeft = function (c) {
      return function (len) {
          return function (str) {
              var prefix = Data_String_Yarn.replicate(Data_Ord.max(Data_Ord.ordInt)(0)(len - Data_String.length(str) | 0))(c);
              return prefix + str;
          };
      };
  };
  exports["padLeft"] = padLeft;
})(PS["SecureVote.Utils.String"] = PS["SecureVote.Utils.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Int = PS["Data.Int"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Utils_String = PS["SecureVote.Utils.String"];
  var Type_Quotient = PS["Type.Quotient"];        
  var octetToBitStr = function ($0) {
      return SecureVote_Utils_String.padLeft("0")(8)(Data_Int.toStringAs(Data_Int.binary)(Type_Quotient.runQuotient(Type_Quotient.canonicalMod256)($0)));
  };
  exports["octetToBitStr"] = octetToBitStr;
})(PS["SV.Utils.Binary"] = PS["SV.Utils.Binary"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Semiring = PS["Data.Semiring"];
  var $$Math = PS["Math"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Utils_String = PS["SecureVote.Utils.String"];        
  var nBitsForRangeVote = function (rangeMax) {
      return Data_Int.ceil($$Math.log(Data_Int.toNumber(rangeMax) + 1.0) / $$Math.log(2.0));
  };
  exports["nBitsForRangeVote"] = nBitsForRangeVote;
})(PS["SV.Utils.Votes"] = PS["SV.Utils.Votes"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Prelude = PS["SV.Prelude"];        
  var onlyJust = function (mas) {
      return Data_Maybe.fromJust()(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.filter(Data_Maybe.isJust)(mas)));
  };
  var fromList = function (ls) {
      var headM = Data_List.head(ls);
      if (headM instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (headM instanceof Data_Maybe.Just) {
          return Data_Array.cons(headM.value0)(Data_Maybe.fromMaybe([  ])(Data_Functor.map(Data_Maybe.functorMaybe)(fromList)(Data_List.tail(ls))));
      };
      throw new Error("Failed pattern match at SecureVote.Utils.Array line 16, column 5 - line 18, column 66: " + [ headM.constructor.name ]);
  };
  var chunk = function (size) {
      return function (v) {
          if (v.length === 0) {
              return [  ];
          };
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Array.take(size)(v) ])(chunk(size)(Data_Array.drop(size)(v)));
      };
  };
  exports["fromList"] = fromList;
  exports["chunk"] = chunk;
  exports["onlyJust"] = onlyJust;
})(PS["SecureVote.Utils.Array"] = PS["SecureVote.Utils.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_ArrayBuffer_ArrayBuffer = PS["Data.ArrayBuffer.ArrayBuffer"];
  var Data_ArrayBuffer_DataView = PS["Data.ArrayBuffer.DataView"];
  var Data_ArrayBuffer_Typed = PS["Data.ArrayBuffer.Typed"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Char = PS["Data.Char"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Prelude = PS["SV.Prelude"];
  var Type_Quotient = PS["Type.Quotient"];
  var toHex = function (bs) {
      return Data_ByteString.toString(bs)(Node_Encoding.Hex.value);
  };
  var fromHex = function (hex) {
      return Data_ByteString.fromString(hex)(Node_Encoding.Hex.value);
  };
  var hexStrToBs = function ($13) {
      return Data_Maybe.fromJust()(fromHex(Network_Ethereum_Core_HexString.unHex($13)));
  };
  var bsToHexStr = function ($15) {
      return Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString(toHex($15)));
  };
  exports["toHex"] = toHex;
  exports["fromHex"] = fromHex;
  exports["hexStrToBs"] = hexStrToBs;
  exports["bsToHexStr"] = bsToHexStr;
})(PS["SecureVote.Utils.Binary"] = PS["SecureVote.Utils.Binary"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Record = PS["Data.Record"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Typelevel_Num = PS["Data.Typelevel.Num"];
  var Data_Typelevel_Undefined = PS["Data.Typelevel.Undefined"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Vec = PS["Data.Vec"];
  var $$Math = PS["Math"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_Types_Ballot = PS["SV.Light.Types.Ballot"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SV_Utils_Binary = PS["SV.Utils.Binary"];
  var SV_Utils_Votes = PS["SV.Utils.Votes"];
  var SecureVote_Utils_Array = PS["SecureVote.Utils.Array"];
  var SecureVote_Utils_Binary = PS["SecureVote.Utils.Binary"];        
  var RangeAbsolute = (function () {
      function RangeAbsolute(value0) {
          this.value0 = value0;
      };
      RangeAbsolute.create = function (value0) {
          return new RangeAbsolute(value0);
      };
      return RangeAbsolute;
  })();
  var RangePlusMinus = (function () {
      function RangePlusMinus(value0) {
          this.value0 = value0;
      };
      RangePlusMinus.create = function (value0) {
          return new RangePlusMinus(value0);
      };
      return RangePlusMinus;
  })();
  var hexToRangeBallot = function (v) {
      return function (rawBallot) {
          var nBits = SV_Utils_Votes.nBitsForRangeVote(v.rangeMax);
          var fullBitString = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))("")(Data_Functor.map(Data_Functor.functorArray)(SV_Utils_Binary.octetToBitStr)(Data_ByteString.unpack(SecureVote_Utils_Binary.hexStrToBs(rawBallot))));
          return Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Ring.sub(Data_Ring.ringInt))(v.offset))(Data_Functor.map(Data_Functor.functorArray)(function ($49) {
              return Data_Maybe.fromJust()(Data_Int.fromStringAs(Data_Int.binary)($49));
          })(Data_Array.take(v.nOpts)(Data_Functor.map(Data_Functor.functorArray)(Data_String.fromCharArray)(SecureVote_Utils_Array.chunk(nBits)(Data_String.toCharArray(fullBitString))))));
      };
  };
  var countRange = function (offsetTyp) {
      return function (opts) {
          return function (weightedBallots) {
              var totalBal = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber))(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0))(Data_Functor.mapFlipped(Data_Functor.functorArray)(weightedBallots)(function (v) {
                  return v.bal;
              }));
              var nOpts = Data_Array.length(opts);
              var doCountRange = function (v) {
                  var rawOpts = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(SV_Light_Types_Ballot.ntSimpleOption))(opts);
                  var procdBallots = Data_Functor.mapFlipped(Data_Functor.functorArray)(weightedBallots)(function ($50) {
                      return (function (v1) {
                          return {
                              bal: v1.bal,
                              vs: hexToRangeBallot({
                                  rangeMax: v.rangeMax,
                                  nOpts: nOpts,
                                  offset: v.offset
                              })(v1.b)
                          };
                      })((function (v1) {
                          return {
                              b: v1.ballot.ballot,
                              bal: v1.bal
                          };
                      })($50));
                  });
                  var names = Data_Functor.map(Data_Functor.functorArray)(Data_Record.get(new Data_Symbol.IsSymbol(function () {
                      return "optionTitle";
                  }))()(Data_Symbol.SProxy.value))(rawOpts);
                  var nameLookup = Data_Map.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Array.zip(Data_Array.range(0)(nOpts - 1 | 0))(names));
                  var getName = function (i) {
                      return Data_Map.lookup(Data_Ord.ordInt)(i)(nameLookup);
                  };
                  var alterAddResult = function (v1) {
                      return Data_Map.alter(Data_Ord.ordInt)(function ($51) {
                          return (function (v3) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(Data_Semiring.add(Network_Ethereum_Core_BigNumber.semiringBigNumber)(v3.value0)(v1.value1), v3.value1 + 1 | 0));
                          })(Data_Maybe.fromMaybe(new Data_Tuple.Tuple(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0), 0))($51));
                      })(v1.value0);
                  };
                  var addVecToOpts = function (v1) {
                      return function (m) {
                          return Data_Foldable.foldr(Data_Foldable.foldableArray)(alterAddResult)(m)(Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(Data_Functor.map(Data_Functor.functorArray)(function ($52) {
                              return Data_Semiring.mul(Network_Ethereum_Core_BigNumber.semiringBigNumber)(v1.bal)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])($52));
                          })(v1.vs)));
                      };
                  };
                  return Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.fromJust())(Data_Array.filter(Data_Maybe.isJust)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(getName(v1.value0))(function (v2) {
                          return {
                              name: v2,
                              count: v1.value1.value0,
                              nVotes: v1.value1.value1
                          };
                      });
                  })(Data_Map.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_Foldable.foldableArray)(addVecToOpts)(Data_Map.empty)(procdBallots)))));
              };
              if (offsetTyp instanceof RangePlusMinus) {
                  return doCountRange({
                      rangeMax: offsetTyp.value0.magnitude * 2 | 0,
                      offset: offsetTyp.value0.magnitude
                  });
              };
              if (offsetTyp instanceof RangeAbsolute) {
                  return doCountRange({
                      rangeMax: offsetTyp.value0.rangeMax,
                      offset: 0
                  });
              };
              throw new Error("Failed pattern match at SV.Light.Counts.RangeVote line 36, column 45 - line 38, column 67: " + [ offsetTyp.constructor.name ]);
          };
      };
  };
  exports["RangeAbsolute"] = RangeAbsolute;
  exports["RangePlusMinus"] = RangePlusMinus;
  exports["countRange"] = countRange;
  exports["hexToRangeBallot"] = hexToRangeBallot;
})(PS["SV.Light.Counts.RangeVote"] = PS["SV.Light.Counts.RangeVote"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var resolveDelegation = function (x0) {
      return function (cm) {
          return function (r) {
              var resolveDelegation$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return function (y3) {
                              return Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple2)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress)(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple6)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress)(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress)(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress)))))))))(new Data_Symbol.IsSymbol(function () {
                                  return "resolveDelegation(address,address)";
                              }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(new Network_Ethereum_Web3_Solidity_Tuple.Tuple2(Data_Functor_Tagged.untagged(y2), Data_Functor_Tagged.untagged(y3))));
                          };
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "voter";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "tokenContract";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty)))(r)(resolveDelegation$prime(x0)(cm));
          };
      };
  }; 
  var findPossibleDelegatorsOf = function (x0) {
      return function (cm) {
          return function (r) {
              var findPossibleDelegatorsOf$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress)))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple2)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeArray(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeArray(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeArray(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeArray(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))))(new Data_Symbol.IsSymbol(function () {
                              return "findPossibleDelegatorsOf(address)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2)));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "delegate";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(findPossibleDelegatorsOf$prime(x0)(cm));
          };
      };
  };
  exports["resolveDelegation"] = resolveDelegation;
  exports["findPossibleDelegatorsOf"] = findPossibleDelegatorsOf;
})(PS["SecureVote.Contracts.SVDelegationV0101"] = PS["SecureVote.Contracts.SVDelegationV0101"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_Types_BallotBox = PS["SV.Light.Types.BallotBox"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Contracts_SVDelegationV0101 = PS["SecureVote.Contracts.SVDelegationV0101"];
  var SecureVote_Utils_Array = PS["SecureVote.Utils.Array"];        
  var procResDlgtion = function (v) {
      return {
          delegatee: v.value3,
          delegator: v.value4,
          token: v.value5
      };
  };
  var mainnetDlgtAddr = Data_Maybe.fromJust()(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkAddress)(Network_Ethereum_Core_HexString.mkHexString("0x4dD28be042F85e287E9AaCe4147152bf1CD835e9")));
  var kovanDlgtAddr = Data_Maybe.fromJust()(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkAddress)(Network_Ethereum_Core_HexString.mkHexString("0x8F6F18b9A83E0b42cE69783a8282441BF8F417fc")));
  var findDelegatorsRecursive = (function () {
      var findDelegators_ = function (carry) {
          return function (v) {
              return function (dlgtSC) {
                  return function (cc) {
                      var confirmDelegation = function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(dlgtSC(SecureVote_Contracts_SVDelegationV0101.resolveDelegation)(cc)({
                              voter: v1.value0,
                              tokenContract: v1.value1
                          }))(function (v2) {
                              var $28 = Data_Eq.eq(Network_Ethereum_Core_Signatures.addressEq)(v2.value3)(v.delegate);
                              if ($28) {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Maybe.Just(v1));
                              };
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                          });
                      };
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(dlgtSC(SecureVote_Contracts_SVDelegationV0101.findPossibleDelegatorsOf)(cc)({
                          delegate: v.delegate
                      }))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log(Data_Show.show(Data_Show.showInt)(Data_Array.length(v1.value0)) + (" possible delegators to " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v.delegate))))(function () {
                              var dlgtPairs = Data_Array.filter(function (v2) {
                                  return !Data_Set.member(Network_Ethereum_Core_Signatures.addressOrd)(v2.value0)(carry);
                              })(Data_Array.zip(v1.value0)(v1.value1));
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("Finding delegators for " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v.delegate) + (", dlgtPairs len: " + Data_Show.show(Data_Show.showInt)(Data_Array.length(dlgtPairs))))))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(SecureVote_Utils_Array.onlyJust)(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(confirmDelegation)(dlgtPairs)))(function (v2) {
                                      var checkNext = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(v2);
                                      var nextCarry = Data_Semigroup.append(Data_Set.semigroupSet(Network_Ethereum_Core_Signatures.addressOrd))(carry)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Network_Ethereum_Core_Signatures.addressOrd)(checkNext));
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("Finding delegators recursively for " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v.delegate) + (", nextCarry n: " + Data_Show.show(Data_Show.showInt)(Data_Set.size(nextCarry))))))(function () {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))([  ]))(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(function (newDlgt) {
                                              return findDelegators_(nextCarry)((function () {
                                                  var $42 = {};
                                                  for (var $43 in v) {
                                                      if ({}.hasOwnProperty.call(v, $43)) {
                                                          $42[$43] = v[$43];
                                                      };
                                                  };
                                                  $42.delegate = newDlgt;
                                                  return $42;
                                              })())(dlgtSC)(cc);
                                          })(checkNext)))(function (v3) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("Got delegators for " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v.delegate) + (", n: " + Data_Show.show(Data_Show.showInt)(Data_Array.length(v3))))))(function () {
                                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Semigroup.append(Data_Set.semigroupSet(Network_Ethereum_Core_Signatures.addressOrd))(nextCarry)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Network_Ethereum_Core_Signatures.addressOrd)(v3))));
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
      return findDelegators_(Data_Set.empty);
  })();
  var getDelegates = function (v) {
      return function (dlgtSC) {
          return function (chainCursor) {
              var getDlgtPair = function (v1) {
                  return new Data_Tuple.Tuple(v1.delegator, v1.delegatee);
              };
              var allVoters = Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1.voterAddr;
              })(v.allBallots);
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Set.semigroupSet(Network_Ethereum_Core_Signatures.addressOrd)))(Data_Set.empty))(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(function (v1) {
                  return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Network_Ethereum_Core_Signatures.addressOrd))(findDelegatorsRecursive({
                      tknAddr: v.tknAddr,
                      delegate: v1
                  })(dlgtSC)(chainCursor));
              })(allVoters)))(function (v1) {
                  return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Map.fromFoldable(Network_Ethereum_Core_Signatures.addressOrd)(Data_Foldable.foldableArray))(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(function (dlgtr) {
                      return Data_Functor.map(Control_Monad_Aff.functorAff)(function ($62) {
                          return getDlgtPair(procResDlgtion($62));
                      })(dlgtSC(SecureVote_Contracts_SVDelegationV0101.resolveDelegation)(chainCursor)({
                          voter: dlgtr,
                          tokenContract: v.tknAddr
                      }));
                  })(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(v1)));
              });
          };
      };
  };
  var dlgtAddr = function (net) {
      if (net === "1") {
          return mainnetDlgtAddr;
      };
      if (net === "42") {
          return kovanDlgtAddr;
      };
      return mainnetDlgtAddr;
  };
  exports["mainnetDlgtAddr"] = mainnetDlgtAddr;
  exports["kovanDlgtAddr"] = kovanDlgtAddr;
  exports["dlgtAddr"] = dlgtAddr;
  exports["procResDlgtion"] = procResDlgtion;
  exports["findDelegatorsRecursive"] = findDelegatorsRecursive;
  exports["getDelegates"] = getDelegates;
})(PS["SV.Light.Delegation"] = PS["SV.Light.Delegation"] || {});
(function(exports) {
  var ipfsAPI =require("ipfs-api"); 

  exports.connectImpl = function(host, port, prot) {
      return ipfsAPI(host, port, {protocol: prot});
  }
})(PS["SV.Light.IPFS"] = PS["SV.Light.IPFS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["SV.Light.IPFS"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var IPFS = PS["IPFS"];
  var IPFS_Block = PS["IPFS.Block"];
  var SV_Prelude = PS["SV.Prelude"];        
  var HTTP = (function () {
      function HTTP() {

      };
      HTTP.value = new HTTP();
      return HTTP;
  })();
  var HTTPS = (function () {
      function HTTPS() {

      };
      HTTPS.value = new HTTPS();
      return HTTPS;
  })();
  var showProt = new Data_Show.Show(function (v) {
      if (v instanceof HTTP) {
          return "http";
      };
      if (v instanceof HTTPS) {
          return "https";
      };
      throw new Error("Failed pattern match at SV.Light.IPFS line 14, column 1 - line 14, column 35: " + [ v.constructor.name ]);
  });
  var connect = function (domain) {
      return function (port) {
          return function (protocol) {
              return Control_Monad_Eff_Uncurried.runEffFn3($foreign.connectImpl)(domain)(port)(Data_Show.show(showProt)(protocol));
          };
      };
  };
  var ipfsRef = Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Ref.newRef(Control_Monad_Eff_Unsafe.unsafePerformEff(connect("ipfs.infura.io")(5001)(HTTPS.value))));
  var getBlock = function (c) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ipfsRef)))(function (v) {
          return IPFS_Block.get(v)(c);
      });
  };
  exports["HTTP"] = HTTP;
  exports["HTTPS"] = HTTPS;
  exports["ipfsRef"] = ipfsRef;
  exports["connect"] = connect;
  exports["getBlock"] = getBlock;
  exports["showProt"] = showProt;
})(PS["SV.Light.IPFS"] = PS["SV.Light.IPFS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Loops = PS["Control.Monad.Loops"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Provider = PS["Network.Ethereum.Web3.Types.Provider"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Prelude = PS["SV.Prelude"];        
  var Mainnet = (function () {
      function Mainnet() {

      };
      Mainnet.value = new Mainnet();
      return Mainnet;
  })();
  var Kovan = (function () {
      function Kovan() {

      };
      Kovan.value = new Kovan();
      return Kovan;
  })();
  var Classic = (function () {
      function Classic() {

      };
      Classic.value = new Classic();
      return Classic;
  })();
  var Ropsten = (function () {
      function Ropsten() {

      };
      Ropsten.value = new Ropsten();
      return Ropsten;
  })();
  var OtherNet = (function () {
      function OtherNet(value0) {
          this.value0 = value0;
      };
      OtherNet.create = function (value0) {
          return new OtherNet(value0);
      };
      return OtherNet;
  })();
  var upmhx = function ($16) {
      return Data_Maybe.fromJust()(Network_Ethereum_Core_HexString.mkHexString($16));
  };
  var zeroAddr = Data_Maybe.fromJust()(Network_Ethereum_Core_Signatures.mkAddress(upmhx("0x0000000000000000000000000000000000000000")));
  var zeroHash = upmhx("0x0000000000000000000000000000000000000000000000000000000000000000");
  var svRopstenProvider = Control_Monad_Eff_Unsafe.unsafePerformEff(Network_Ethereum_Web3_Types_Provider.httpProvider("https://ropsten.eth.secure.vote:8545"));
  var svMainnetProvider = Control_Monad_Eff_Unsafe.unsafePerformEff(Network_Ethereum_Web3_Types_Provider.httpProvider("https://mainnet.eth.secure.vote:8545"));
  var svKovanProvider = Control_Monad_Eff_Unsafe.unsafePerformEff(Network_Ethereum_Web3_Types_Provider.httpProvider("https://kovan.eth.secure.vote:8545"));
  var svClassicProvider = Control_Monad_Eff_Unsafe.unsafePerformEff(Network_Ethereum_Web3_Types_Provider.httpProvider("https://classic.eth.secure.vote:8545"));
  var _svNetVar = Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Ref.newRef(Mainnet.value));
  var setProvider = function (p) {
      return Control_Monad_Eff_Ref.writeRef(_svNetVar)(new OtherNet(p));
  };
  var _getNet = function (n) {
      if (n instanceof Mainnet) {
          return svMainnetProvider;
      };
      if (n instanceof Kovan) {
          return svKovanProvider;
      };
      if (n instanceof Classic) {
          return svClassicProvider;
      };
      if (n instanceof Ropsten) {
          return svRopstenProvider;
      };
      if (n instanceof OtherNet) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(Network_Ethereum_Web3_Types_Provider.httpProvider(n.value0));
      };
      throw new Error("Failed pattern match at SecureVote.Web3.Web3 line 61, column 13 - line 66, column 52: " + [ n.constructor.name ]);
  };
  var runWeb3_ = function (w3r) {
      var go = function (net) {
          return function (n) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(Control_Monad_Aff.plusParAff)([ Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(Network_Ethereum_Web3_Types_Types.runWeb3(_getNet(net))(w3r)), Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(Control_Apply.applySecond(Control_Monad_Aff.applyAff)(Control_Monad_Aff.delay(Data_Time_Duration.Milliseconds(15.0 * 1000.0)))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Left.create(Network_Ethereum_Web3_Types_Types.RemoteError.create("Timeout reached (" + (Data_Show.show(Data_Show.showNumber)(15.0) + "s)")))))) ])))(function (v) {
                  var $13 = Data_Either.isLeft(v) && n < 3;
                  if ($13) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.warn("Warning: Web3 request failed. Previous tries: " + (Data_Show.show(Data_Show.showInt)(n) + ". Retrying...")))(function () {
                          return go(net)(n + 1 | 0);
                      });
                  };
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
              });
          };
      };
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(_svNetVar)))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(go(v)(0))(function (v1) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
          });
      });
  };
  exports["Mainnet"] = Mainnet;
  exports["Kovan"] = Kovan;
  exports["Classic"] = Classic;
  exports["Ropsten"] = Ropsten;
  exports["OtherNet"] = OtherNet;
  exports["runWeb3_"] = runWeb3_;
  exports["zeroHash"] = zeroHash;
  exports["zeroAddr"] = zeroAddr;
  exports["setProvider"] = setProvider;
})(PS["SecureVote.Web3.Web3"] = PS["SecureVote.Web3.Web3"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Tuple = PS["Data.Tuple"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var SV_Light_Types_Ballot = PS["SV.Light.Types.Ballot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Web3_Web3 = PS["SecureVote.Web3.Web3"];        
  var setFromBSpec = function (v) {
      return function (b) {
          return function (thing) {
              if (b instanceof SV_Light_Types_Ballot.BVer01) {
                  return SV_Light_Types_Ballot.BVer01.create(v.sV01(b.value0)(thing));
              };
              if (b instanceof SV_Light_Types_Ballot.BVer02) {
                  return (function (v1) {
                      return new SV_Light_Types_Ballot.BVer02(v1.value0, v1.value1);
                  })(v.sV02(b.value0)(b.value1)(thing));
              };
              throw new Error("Failed pattern match at SV.Types.Lenses line 36, column 37 - line 38, column 68: " + [ b.constructor.name ]);
          };
      };
  };
  var getFromBSpec = function (v) {
      return function (b) {
          if (b instanceof SV_Light_Types_Ballot.BVer01) {
              return v.gV01(b.value0);
          };
          if (b instanceof SV_Light_Types_Ballot.BVer02) {
              return v.gV02(b.value0)(b.value1);
          };
          throw new Error("Failed pattern match at SV.Types.Lenses line 24, column 31 - line 26, column 27: " + [ b.constructor.name ]);
      };
  };
  var getBSpecVer = function (b) {
      if (b instanceof SV_Light_Types_Ballot.BVer01) {
          return 1;
      };
      if (b instanceof SV_Light_Types_Ballot.BVer02) {
          return 2;
      };
      throw new Error("Failed pattern match at SV.Types.Lenses line 30, column 17 - line 35, column 1: " + [ b.constructor.name ]);
  };
  var _options = function (dictStrong) {
      return Data_Lens_Lens.lens(getFromBSpec({
          gV01: function (r) {
              return r.options;
          },
          gV02: function (b) {
              return function (o) {
                  return o;
              };
          }
      }))(setFromBSpec({
          sV01: function (r) {
              return function (opts) {
                  var $37 = {};
                  for (var $38 in r) {
                      if ({}.hasOwnProperty.call(r, $38)) {
                          $37[$38] = r[$38];
                      };
                  };
                  $37.options = opts;
                  return $37;
              };
          },
          sV02: function (b) {
              return function (o) {
                  return function (o2) {
                      return new Data_Tuple.Tuple(b, o2);
                  };
              };
          }
      }))(dictStrong);
  };
  var _encryptionPK = function (dictStrong) {
      var g = function (v) {
          return v.encryptionPK;
      };
      return Data_Lens_Lens.lens(getFromBSpec({
          gV01: g,
          gV02: function (b) {
              return function (o) {
                  return g(b);
              };
          }
      }))(setFromBSpec({
          sV01: function (r) {
              return function (encpk) {
                  var $48 = {};
                  for (var $49 in r) {
                      if ({}.hasOwnProperty.call(r, $49)) {
                          $48[$49] = r[$49];
                      };
                  };
                  $48.encryptionPK = encpk;
                  return $48;
              };
          },
          sV02: function (b) {
              return function (o) {
                  return function (epk) {
                      return new Data_Tuple.Tuple((function () {
                          var $51 = {};
                          for (var $52 in b) {
                              if ({}.hasOwnProperty.call(b, $52)) {
                                  $51[$52] = b[$52];
                              };
                          };
                          $51.encryptionPK = epk;
                          return $51;
                      })(), o);
                  };
              };
          }
      }))(dictStrong);
  };
  exports["getFromBSpec"] = getFromBSpec;
  exports["getBSpecVer"] = getBSpecVer;
  exports["setFromBSpec"] = setFromBSpec;
  exports["_encryptionPK"] = _encryptionPK;
  exports["_options"] = _options;
})(PS["SV.Types.Lenses"] = PS["SV.Types.Lenses"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Map = PS["Data.Map"];
  var Data_StrMap = PS["Data.StrMap"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var SV_Prelude = PS["SV.Prelude"];        
  var SuStr = (function () {
      function SuStr(value0) {
          this.value0 = value0;
      };
      SuStr.create = function (value0) {
          return new SuStr(value0);
      };
      return SuStr;
  })();
  var SuRes = (function () {
      function SuRes(value0) {
          this.value0 = value0;
      };
      SuRes.create = function (value0) {
          return new SuRes(value0);
      };
      return SuRes;
  })();
  var SuBal = (function () {
      function SuBal(value0) {
          this.value0 = value0;
      };
      SuBal.create = function (value0) {
          return new SuBal(value0);
      };
      return SuBal;
  })();
  var SuDlgt = (function () {
      function SuDlgt(value0) {
          this.value0 = value0;
      };
      SuDlgt.create = function (value0) {
          return new SuDlgt(value0);
      };
      return SuDlgt;
  })();
  var mkSUWarn = function (m) {
      return {
          t: "warn",
          p: new SuStr(m)
      };
  };
  var mkSUSuccess = function (b) {
      return {
          t: "success",
          p: new SuRes(b)
      };
  };
  var mkSULog = function (p) {
      return {
          t: "log",
          p: new SuStr(p)
      };
  };
  var mkSUFail = function (e) {
      return {
          t: "fail",
          p: new SuStr(e)
      };
  };
  var mkSUDlgts = function (dlgts) {
      return {
          t: "delegates",
          p: new SuDlgt(dlgts)
      };
  };
  var mkSUBal = function (bals) {
      return {
          t: "balances",
          p: new SuBal(bals)
      };
  };
  exports["SuStr"] = SuStr;
  exports["SuRes"] = SuRes;
  exports["SuBal"] = SuBal;
  exports["SuDlgt"] = SuDlgt;
  exports["mkSUFail"] = mkSUFail;
  exports["mkSULog"] = mkSULog;
  exports["mkSUSuccess"] = mkSUSuccess;
  exports["mkSUWarn"] = mkSUWarn;
  exports["mkSUBal"] = mkSUBal;
  exports["mkSUDlgts"] = mkSUDlgts;
})(PS["SV.Types.OutboundLogs"] = PS["SV.Types.OutboundLogs"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_ByteString = PS["Data.ByteString"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var getVote = function (x0) {
      return function (cm) {
          return function (r) {
              var getVote$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return function (y3) {
                              return Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple2)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple3)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress)(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBytesD))))))(new Data_Symbol.IsSymbol(function () {
                                  return "getVote(uint256,uint256)";
                              }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(new Network_Ethereum_Web3_Solidity_Tuple.Tuple2(Data_Functor_Tagged.untagged(y2), Data_Functor_Tagged.untagged(y3))));
                          };
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "ballotId";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "voteId";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty)))(r)(getVote$prime(x0)(cm));
          };
      };
  };
  var getDetails = function (x0) {
      return function (cm) {
          return function (r) {
              var getDetails$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return function (y3) {
                              return Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple2)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple10)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBoolean)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBool)(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize16))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize16))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize64))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBoolean)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBool)(Network_Ethereum_Web3_Solidity_Generic.inductiveAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress)(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeD1)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize16))))))))))))))(new Data_Symbol.IsSymbol(function () {
                                  return "getDetails(uint256,address)";
                              }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(new Network_Ethereum_Web3_Solidity_Tuple.Tuple2(Data_Functor_Tagged.untagged(y2), Data_Functor_Tagged.untagged(y3))));
                          };
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "ballotId";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "voter";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty)))(r)(getDetails$prime(x0)(cm));
          };
      };
  };
  exports["getVote"] = getVote;
  exports["getDetails"] = getDetails;
})(PS["SecureVote.Contracts.BBFarm"] = PS["SecureVote.Contracts.BBFarm"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var decimals = function (x0) {
      return function (cm) {
          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple0)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBaseNull))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize8))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize8)))))(new Data_Symbol.IsSymbol(function () {
              return "decimals()";
          }))(x0)(cm)(Data_Functor_Tagged.tagged(Network_Ethereum_Web3_Solidity_Tuple.Tuple0.value)));
      };
  };
  var balanceOf = function (x0) {
      return function (cm) {
          return function (r) {
              var balanceOf$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress)))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))))(new Data_Symbol.IsSymbol(function () {
                              return "balanceOf(address)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "_owner";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(balanceOf$prime(x0)(cm));
          };
      };
  };
  exports["decimals"] = decimals;
  exports["balanceOf"] = balanceOf;
})(PS["SecureVote.Contracts.FakeErc20"] = PS["SecureVote.Contracts.FakeErc20"] || {});
(function(exports) {
  var bs58 =require("bs58"); 


  exports.hexHashToSha256Bs58 = function(h) {
      return bs58.encode(Buffer.from("1220" + h, 'hex'));
  };
})(PS["SecureVote.Utils.IPFS"] = PS["SecureVote.Utils.IPFS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["SecureVote.Utils.IPFS"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var SV_Prelude = PS["SV.Prelude"];
  exports["hexHashToSha256Bs58"] = $foreign.hexHashToSha256Bs58;
})(PS["SecureVote.Utils.IPFS"] = PS["SecureVote.Utils.IPFS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var currentTimestamp = function __do() {
      var v = Control_Monad_Eff_Now.now();
      var v1 = Data_DateTime_Instant.unInstant(v);
      return $$Math.round(v1 / 1000.0);
  };
  exports["currentTimestamp"] = currentTimestamp;
})(PS["SecureVote.Utils.Time"] = PS["SecureVote.Utils.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Utils_Binary = PS["SecureVote.Utils.Binary"];        
  var hexToBytesN = function (dictKnownSize) {
      return function (hx) {
          return Network_Ethereum_Web3_Solidity_Bytes.fromByteString(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value)(Network_Ethereum_Core_HexString.toByteString(hx));
      };
  };
  var bytesNToHex = function (dictKnownSize) {
      return function ($2) {
          return SecureVote_Utils_Binary.bsToHexStr(Network_Ethereum_Web3_Solidity_Bytes.unBytesN(dictKnownSize)($2));
      };
  };
  exports["bytesNToHex"] = bytesNToHex;
  exports["hexToBytesN"] = hexToBytesN;
})(PS["SecureVote.Utils.Web3Bin"] = PS["SecureVote.Utils.Web3Bin"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Crypt_NaCl = PS["Crypt.NaCl"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Decimal = PS["Data.Decimal"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Record = PS["Data.Record"];
  var Data_Record_ShowRecord = PS["Data.Record.ShowRecord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Debug_Trace = PS["Debug.Trace"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var IPFS = PS["IPFS"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Api = PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_Counts = PS["SV.Light.Counts"];
  var SV_Light_Counts_BinaryVote = PS["SV.Light.Counts.BinaryVote"];
  var SV_Light_Counts_Petition = PS["SV.Light.Counts.Petition"];
  var SV_Light_Counts_RangeVote = PS["SV.Light.Counts.RangeVote"];
  var SV_Light_Delegation = PS["SV.Light.Delegation"];
  var SV_Light_IPFS = PS["SV.Light.IPFS"];
  var SV_Light_SCs_BBFarmHelpers = PS["SV.Light.SCs.BBFarmHelpers"];
  var SV_Light_Types_Ballot = PS["SV.Light.Types.Ballot"];
  var SV_Light_Types_BallotBox = PS["SV.Light.Types.BallotBox"];
  var SV_Light_Types_Eth = PS["SV.Light.Types.Eth"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SV_Types_Lenses = PS["SV.Types.Lenses"];
  var SV_Types_OutboundLogs = PS["SV.Types.OutboundLogs"];
  var SV_Utils_BigNumber = PS["SV.Utils.BigNumber"];
  var SecureVote_Contracts_BBFarm = PS["SecureVote.Contracts.BBFarm"];
  var SecureVote_Contracts_FakeErc20 = PS["SecureVote.Contracts.FakeErc20"];
  var SecureVote_Utils_Array = PS["SecureVote.Utils.Array"];
  var SecureVote_Utils_IPFS = PS["SecureVote.Utils.IPFS"];
  var SecureVote_Utils_Time = PS["SecureVote.Utils.Time"];
  var SecureVote_Utils_Web3Bin = PS["SecureVote.Utils.Web3Bin"];
  var SecureVote_Web3_Web3 = PS["SecureVote.Web3.Web3"];
  var Simple_JSON = PS["Simple.JSON"];
  var Type_Row = PS["Type.Row"];        
  var removeDupes = function (dictMonadThrow) {
      return function (v) {
          if (v.length === 0) {
              return Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0())([  ]);
          };
          return Control_Bind.bind((dictMonadThrow.Monad0()).Bind1())(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(dictMonadThrow)("ballots did not have a `last` element - but we checked for that!"))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0()))(Data_Array.last(v)))(function (v1) {
              var remBallots = Data_Array.filter(function (b) {
                  return Data_Eq.notEq(Network_Ethereum_Core_Signatures.addressEq)(b.voterAddr)(v1.voterAddr);
              })(v);
              return Control_Apply.apply(((dictMonadThrow.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadThrow.Monad0()).Bind1()).Apply0()).Functor0())(Data_Semigroup.append(Data_Semigroup.semigroupArray))(removeDupes(dictMonadThrow)(remBallots)))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0())([ v1 ]));
          });
      };
  };
  var incrementBallotProgress = function (totalBallots) {
      return function (log) {
          return function (avar) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Semiring.add(Data_Semiring.semiringInt)(1))(Control_Monad_Aff_AVar.takeVar(avar)))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v)(avar))(function () {
                      var $58 = v % 10 === 0;
                      if ($58) {
                          return log("Processed " + (Data_Show.show(Data_Show.showInt)(v) + (" ballots; " + (Data_Show.show(Data_Show.showInt)((v * 100 | 0) / totalBallots | 0) + "% done."))));
                      };
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                  });
              });
          };
      };
  };
  var getVoteOrRecurse = function (ballotMap) {
      return function (delegateMap) {
          return function (v) {
              var go = function (v1) {
                  var v2 = Data_Map.lookup(Network_Ethereum_Core_Signatures.addressOrd)(v1.p.vtr)(v1.ballotMap);
                  if (v2 instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Monad_Rec_Class.Done.create({
                          origVoter: v1.p.origVoter,
                          ballot: v2.value0,
                          bal: v1.p.bal
                      }));
                  };
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map.lookup(Network_Ethereum_Core_Signatures.addressOrd)(v1.p.vtr)(v1.delegateMap))(function (v3) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Control_Monad_Rec_Class.Loop({
                              ballotMap: v1.ballotMap,
                              delegateMap: v1.delegateMap,
                              p: (function () {
                                  var $66 = {};
                                  for (var $67 in v1.p) {
                                      if ({}.hasOwnProperty.call(v1.p, $67)) {
                                          $66[$67] = v1["p"][$67];
                                      };
                                  };
                                  $66.vtr = v3;
                                  return $66;
                              })()
                          }));
                      });
                  };
                  throw new Error("Failed pattern match at SV.Light.AuditBallot line 413, column 63 - line 417, column 72: " + [ v2.constructor.name ]);
              };
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecMaybe)(go)({
                  ballotMap: ballotMap,
                  delegateMap: delegateMap,
                  p: {
                      origVoter: v.value0,
                      vtr: v.value0,
                      bal: v.value1
                  }
              }))(function (v1) {
                  var v2 = Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Console.log("Returning for voter " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v1.origVoter) + (" balance " + (Data_Show.show(Network_Ethereum_Core_BigNumber.showBigNumber)(v1.bal) + (" with ballot " + Global_Unsafe.unsafeStringify(v1.ballot)))))));
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v1);
              });
          };
      };
  };
  var getResults = function (ballotOpts) {
      return function (weightedBallots) {
          if (ballotOpts instanceof SV_Light_Types_Ballot.OptsBinary) {
              return SV_Light_Counts_BinaryVote.countBinary(weightedBallots);
          };
          if (ballotOpts instanceof SV_Light_Types_Ballot.OptsSimple) {
              return SV_Light_Counts_RangeVote.countRange(new SV_Light_Counts_RangeVote.RangePlusMinus({
                  magnitude: 3
              }))(ballotOpts.value1)(weightedBallots);
          };
          if (ballotOpts instanceof SV_Light_Types_Ballot.OptsPetition) {
              return SV_Light_Counts_Petition.countPetition(weightedBallots);
          };
          throw new Error("Failed pattern match at SV.Light.AuditBallot line 422, column 41 - line 426, column 39: " + [ ballotOpts.constructor.name ]);
      };
  };
  var getBlockTimestamp = function (blkNum) {
      return Data_Functor.mapFlipped(Control_Monad_Aff.functorAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(SecureVote_Web3_Web3.runWeb3_(Network_Ethereum_Web3_Api.eth_getBlockByNumber(Network_Ethereum_Web3_Types_Types.BN.create(Data_Newtype.wrap(Network_Ethereum_Web3_Types_Types.newtypeBlockNumber)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(blkNum))))))(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error)))(function (v) {
          return Network_Ethereum_Core_BigNumber.unsafeToInt(v.timestamp);
      });
  };
  var getBallots = function (bbSC) {
      return function (v) {
          return function (incBallotProgress) {
              if (v.nVotesCast <= 0) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)([  ]);
              };
              if (Data_Boolean.otherwise) {
                  var getBallot = function (i) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("Unable to convert " + (Data_Show.show(Data_Show.showInt)(i) + " to uint256!"))(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(SV_Light_Types_Eth.uint256Px)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(i))))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(bbSC(SecureVote_Contracts_BBFarm.getVote)(Network_Ethereum_Web3_Types_Types.Latest.value)({
                              ballotId: v.ballotId,
                              voteId: v1
                          }))(function (v2) {
                              var ballot = SecureVote_Utils_Web3Bin.bytesNToHex(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3))(v2.value0);
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(incBallotProgress)(function () {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                                      i: i,
                                      ballot: ballot,
                                      voterPk: SecureVote_Web3_Web3.zeroHash,
                                      voterAddr: v2.value1
                                  });
                              });
                          });
                      });
                  };
                  var allVoteIds = Data_Array.range(0)(v.nVotesCast - 1 | 0);
                  var v1 = SecureVote_Utils_Array.chunk(25)(allVoteIds);
                  var v2 = Data_Functor.map(Data_Functor.functorArray)(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(getBallot))(v1);
                  return Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Array.concat)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Aff.applicativeAff)(v2));
              };
              throw new Error("Failed pattern match at SV.Light.AuditBallot line 277, column 1 - line 277, column 124: " + [ bbSC.constructor.name, v.constructor.name, incBallotProgress.constructor.name ]);
          };
      };
  };
  var getBallotSpec = function (h) {
      var getIpfs = Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_IPFS.getBlock(SecureVote_Utils_IPFS.hexHashToSha256Bs58(h)))(function (v) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Node_Buffer.toString(Node_Encoding.UTF8.value)(v.data));
      });
      var ajaxGet = function (url) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableString)(url))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Eq.notEq(Network_HTTP_StatusCode.eqStatusCode)(v.status)(200))(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("URL (" + (url + (") responded with status code (" + (Data_Show.show(Network_HTTP_StatusCode.showStatusCode)(v.status) + ")")))))))(function () {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.response);
              });
          });
      };
      var getHttp = (function () {
          var filename = "0x" + (Network_Ethereum_Core_HexString.unHex(h) + ".json");
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff.delay(3000.0))(function () {
              return Control_Alt.alt(Control_Monad_Aff.altAff)(ajaxGet("https://archive.secure.vote/" + filename))(ajaxGet("https://archive.test.secure.vote/" + filename));
          });
      })();
      var _getBallotSpec = Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(Control_Monad_Aff.plusParAff)([ Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getIpfs), Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getHttp) ]));
      return Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(function ($185) {
          return SV_Prelude.exceptToAff(Simple_JSON["readJSON'"](SV_Light_Types_Ballot.readFBallotSpec)($185));
      })(_getBallotSpec);
  };
  var getBallotInfo = function (v) {
      var w3 = Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showCallError))(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error))(SecureVote_Web3_Web3.runWeb3_));
      var uintToInt = function (dictKnownSize) {
          return function ($186) {
              return Network_Ethereum_Core_BigNumber.unsafeToInt(Network_Ethereum_Web3_Solidity_UInt.unUIntN(dictKnownSize)($186));
          };
      };
      var tos = Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._to(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.bbFarmLoc.address))(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions);
      var skCheck = function (a) {
          var $98 = Data_Eq.eq(Network_Ethereum_Core_HexString.hexStringEq)(a)(SecureVote_Web3_Web3.zeroHash);
          if ($98) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(a);
      };
      var rawToBallotInfo = function (v1) {
          return SV_Light_Types_RunBallot.mkBallotInfo(v.ballotId)(SecureVote_Utils_Web3Bin.bytesNToHex(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3))(v1.value6))(uintToInt(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN4))(Network_Ethereum_Web3_Solidity_Size.sizeN6))(v1.value4))(uintToInt(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN4))(Network_Ethereum_Web3_Solidity_Size.sizeN6))(v1.value5))(skCheck(SecureVote_Utils_Web3Bin.bytesNToHex(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3))(v1.value2)))(uintToInt(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(v1.value1));
      };
      return Data_Functor.map(Control_Monad_Aff.functorAff)(rawToBallotInfo)(w3(SecureVote_Contracts_BBFarm.getDetails(tos)(Network_Ethereum_Web3_Types_Types.Latest.value)({
          ballotId: v.ballotId,
          voter: SecureVote_Web3_Web3.zeroAddr
      })));
  };
  var getBalances = function (w3Erc) {
      return function (blockNumber) {
          return function (ballots) {
              var addBalance = function (voterAddr) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2)))(w3Erc(SecureVote_Contracts_FakeErc20.balanceOf)(Network_Ethereum_Web3_Types_Types.BN.create(Data_Newtype.wrap(Network_Ethereum_Web3_Types_Types.newtypeBlockNumber)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(blockNumber))))({
                      _owner: voterAddr
                  })))(function (v) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Tuple.Tuple(voterAddr, v));
                  });
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel.parTraverse(Control_Monad_Aff.parallelAff)(Data_Traversable.traversableArray)(addBalance)(ballots))(function (v) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Map.fromFoldable(Network_Ethereum_Core_Signatures.addressOrd)(Data_Foldable.foldableArray)(v));
              });
          };
      };
  };
  var findEthBlockBefore = function (targetTime) {
      var _findLastEthBlockBefore = function (tTime) {
          return function (v) {
              var go = function (tTime2) {
                  return function (hTs1) {
                      return function (hB1) {
                          return function (lTs1) {
                              return function (lB1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("Block search: blockN diff: " + (Data_Show.show(Data_Show.showInt)(hB1 - lB1 | 0) + (", Target: " + Data_Show.show(Data_Show.showInt)(tTime2)))))(function () {
                                      var testBlockN = ((hB1 - lB1 | 0) / 2 | 0) + lB1 | 0;
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(getBlockTimestamp(testBlockN))(function (v1) {
                                          var v2 = Data_Ord.compare(Data_Ord.ordInt)(v1)(tTime2);
                                          if (v2 instanceof Data_Ordering.GT) {
                                              return _findLastEthBlockBefore(tTime2)({
                                                  hTs: v1,
                                                  hB: testBlockN,
                                                  lTs: lTs1,
                                                  lB: lB1
                                              });
                                          };
                                          if (v2 instanceof Data_Ordering.EQ) {
                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(testBlockN);
                                          };
                                          if (v2 instanceof Data_Ordering.LT) {
                                              var $118 = (hB1 - lB1 | 0) === 1;
                                              if ($118) {
                                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(lB1);
                                              };
                                              return _findLastEthBlockBefore(tTime2)({
                                                  hTs: hTs1,
                                                  hB: hB1,
                                                  lTs: v1,
                                                  lB: testBlockN
                                              });
                                          };
                                          throw new Error("Failed pattern match at SV.Light.AuditBallot line 392, column 13 - line 395, column 126: " + [ v2.constructor.name ]);
                                      });
                                  });
                              };
                          };
                      };
                  };
              };
              var v1 = Data_Ord.compare(Data_Ord.ordInt)(v.hB)(v.lB);
              if (v1 instanceof Data_Ordering.LT) {
                  return go(tTime)(v.lTs)(v.lB)(v.hTs)(v.hB);
              };
              if (v1 instanceof Data_Ordering.EQ) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.lB);
              };
              if (v1 instanceof Data_Ordering.GT) {
                  return go(tTime)(v.hTs)(v.hB)(v.lTs)(v.lB);
              };
              throw new Error("Failed pattern match at SV.Light.AuditBallot line 381, column 9 - line 384, column 45: " + [ v1.constructor.name ]);
          };
      };
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Functor.mapFlipped(Control_Monad_Aff.functorAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(SecureVote_Web3_Web3.runWeb3_(Network_Ethereum_Web3_Api.eth_blockNumber))(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error)))(function ($187) {
          return Network_Ethereum_Core_BigNumber.unsafeToInt(Data_Newtype.unwrap(Network_Ethereum_Web3_Types_Types.newtypeBlockNumber)($187));
      }))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Data_Functor.map(Control_Monad_Aff.functorParAff)(Data_Tuple.Tuple.create)(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getBlockTimestamp(v))))(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getBlockTimestamp(0)))))(function (v1) {
              var $126 = v1.value0 <= targetTime;
              if ($126) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
              };
              var ts2Scaled = Data_Int.toNumber((v1.value0 - v1.value1 | 0) / 100000 | 0);
              var ts1Scaled = Data_Int.toNumber((targetTime - v1.value1 | 0) / 100000 | 0);
              var bScaled = Data_Int.toNumber((v - 0 | 0) / 1000 | 0);
              var midStep = (ts1Scaled * bScaled) / ts2Scaled;
              var finalStepF = function ($188) {
                  return 0 + (1000 * Data_Int.round($188) | 0) | 0;
              };
              var gBH = Data_Ord.min(Data_Ord.ordInt)(finalStepF(midStep * 1.1))(v);
              var gBL = Data_Ord.max(Data_Ord.ordInt)(finalStepF(midStep * 0.9))(0);
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Data_Functor.map(Control_Monad_Aff.functorParAff)(Data_Tuple.Tuple.create)(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getBlockTimestamp(gBH))))(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(getBlockTimestamp(gBL)))))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("Searching for block with targetTs: " + (Data_Show.show(Data_Show.showInt)(targetTime) + (", currBlockTs: " + (Data_Show.show(Data_Show.showInt)(v1.value0) + (", currBlock: " + Data_Show.show(Data_Show.showInt)(v)))))))(function () {
                      var runF = _findLastEthBlockBefore(targetTime);
                      var $128 = v1.value0 < targetTime || targetTime < v1.value1;
                      if ($128) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Cannot find Eth block at " + (Data_Show.show(Data_Show.showInt)(targetTime) + (" because it is outside range: " + (Data_Show.show(Data_Show.showInt)(v1.value1) + (", " + Data_Show.show(Data_Show.showInt)(v1.value0)))))));
                      };
                      var v3 = new Data_Tuple.Tuple(Data_Ord.compare(Data_Ord.ordInt)(v2.value0)(targetTime), Data_Ord.compare(Data_Ord.ordInt)(v2.value1)(targetTime));
                      if (v3.value0 instanceof Data_Ordering.LT) {
                          return runF({
                              hTs: v1.value0,
                              hB: v,
                              lTs: v2.value0,
                              lB: gBH
                          });
                      };
                      if (v3.value1 instanceof Data_Ordering.GT) {
                          return runF({
                              hTs: v2.value1,
                              hB: gBL,
                              lTs: v1.value1,
                              lB: 0
                          });
                      };
                      if (v3.value0 instanceof Data_Ordering.EQ) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(gBH);
                      };
                      if (v3.value1 instanceof Data_Ordering.EQ) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(gBL);
                      };
                      if (v3.value0 instanceof Data_Ordering.GT && v3.value1 instanceof Data_Ordering.LT) {
                          return runF({
                              hTs: v2.value0,
                              hB: gBH,
                              lTs: v2.value1,
                              lB: gBL
                          });
                      };
                      throw new Error("Failed pattern match at SV.Light.AuditBallot line 368, column 18 - line 377, column 77: " + [ v3.constructor.name ]);
                  });
              });
          });
      });
  };
  var bannedAddrs = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Network_Ethereum_Core_Signatures.addressOrd)(Data_Functor.map(Data_Functor.functorArray)(function ($189) {
      return Data_Maybe.fromJust()(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkAddress)(Network_Ethereum_Core_HexString.mkHexString)($189));
  })([ "0x8bf7b2d536d286b9c5ad9d99f608e9e214de63f0" ]));
  var removeBannedAddrs = Data_Map.filterKeys(Network_Ethereum_Core_Signatures.addressOrd)(function (k) {
      return !Data_Set.member(Network_Ethereum_Core_Signatures.addressOrd)(k)(bannedAddrs);
  });
  var runBallotCount = function (v) {
      return function (updateF) {
          var web3NoArgs = function (f) {
              return function (txOpts) {
                  return function (cc) {
                      return function (v1) {
                          return f(txOpts)(cc);
                      };
                  };
              };
          };
          var warnAff = function (str) {
              var v1 = updateF(SV_Types_OutboundLogs.mkSUWarn(str));
              if (v.silent) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
              };
              return Control_Monad_Aff_Console.warn(str);
          };
          var warn = function ($190) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(warnAff($190));
          };
          var spyDev = function (a) {
              var $147 = v.netId === "42";
              if ($147) {
                  return Debug_Trace.spy(Debug_Trace.warn())(a);
              };
              return a;
          };
          var logDelegates = function ($191) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(updateF(spyDev(SV_Types_OutboundLogs.mkSUDlgts($191))));
          };
          var logBalances = function ($192) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(updateF(spyDev(SV_Types_OutboundLogs.mkSUBal($192))));
          };
          var logAff = function (str) {
              var v1 = updateF(SV_Types_OutboundLogs.mkSULog(str));
              if (v.silent) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
              };
              return Control_Monad_Aff_Console.log(str);
          };
          var log = function (str) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(logAff(str));
          };
          var logDev = function (str) {
              if (v.dev) {
                  return log(str);
              };
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Aff.monadAff))(Data_Unit.unit);
          };
          var genericSC = function (tos) {
              return function (f) {
                  return function (c) {
                      return function (args) {
                          return Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showCallError))(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error))(SecureVote_Web3_Web3.runWeb3_))(f(tos)(c)(args));
                      };
                  };
              };
          };
          var failAff = function (str) {
              var v1 = updateF(SV_Types_OutboundLogs.mkSUFail(str));
              if (v.silent) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
              };
              return Control_Monad_Aff_Console.error(str);
          };
          var fail = function ($193) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(failAff($193));
          };
          var ercSC = genericSC(v.ercTos);
          var dlgtSC = genericSC(v.dlgtTos);
          var convE = function (dictMonadThrow) {
              return function (me) {
                  return Control_Bind.bindFlipped((dictMonadThrow.Monad0()).Bind1())(Data_Either.either(function ($194) {
                      return Control_Monad_Error_Class.throwError(dictMonadThrow)("Web3 Call Error: " + Data_Show.show(Network_Ethereum_Web3_Types_Types.showCallError)($194));
                  })(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0())))(me);
              };
          };
          var w3Gen = function (r) {
              return function (tos) {
                  return function ($195) {
                      return convE(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error))(SecureVote_Web3_Web3.runWeb3_)(r(tos)($195))));
                  };
              };
          };
          var w3BB = function (r) {
              return w3Gen(r)(v.bbFarmTos);
          };
          var w3Erc = function (r) {
              return w3Gen(r)(v.ercTos);
          };
          var bbSC = genericSC(v.bbFarmTos);
          var adjustBal = function (dps) {
              return Data_Semiring.mul(Network_Ethereum_Core_BigNumber.semiringBigNumber)(Network_Ethereum_Core_BigNumber.pow(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(10))(0 - dps | 0));
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Int.round)(SecureVote_Utils_Time.currentTimestamp))))(function (v1) {
              var tknAddr = Data_Maybe.fromJust()(Data_Lens_Getter.viewOn(v.ercTos)(Network_Ethereum_Web3_Types_Types._to(Data_Lens_Internal_Forget.strongForget)));
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Ballot StartTime: " + (Data_Show.show(Data_Show.showInt)(v.bInfo.startTime) + (", Ballot EndTime: " + (Data_Show.show(Data_Show.showInt)(v.bInfo.endTime) + (", Current Time: " + Data_Show.show(Data_Show.showInt)(v1)))))))(function () {
                  var ballotOptions = Data_Lens_Getter.viewOn(v.bSpec)(SV_Types_Lenses._options(Data_Lens_Internal_Forget.strongForget));
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Control_Monad_Aff.forkAff((function () {
                      var _endTime = Data_Ord.min(Data_Ord.ordInt)(v1)(v.bInfo.endTime);
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(logAff("Finding Eth blocks close to times: " + (Data_Show.show(Data_Tuple.showTuple(Data_Show.showInt)(Data_Show.showInt))(new Data_Tuple.Tuple(v.bInfo.startTime, _endTime)) + " (takes 10-20 seconds)")))(function () {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Data_Functor.map(Control_Monad_Aff.functorParAff)(Data_Tuple.Tuple.create)(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(findEthBlockBefore(v.bInfo.startTime))))(Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(findEthBlockBefore(_endTime)))))(function (v2) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(logAff("Using start/end blocks " + (Data_Show.show(Data_Tuple.showTuple(Data_Show.showInt)(Data_Show.showInt))(v2) + " for ERC20 balances and delegation.")))(function () {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2);
                              });
                          });
                      });
                  })())))(function (v2) {
                      var encPkM = Data_Lens_Getter.viewOn(v.bSpec)(SV_Types_Lenses._encryptionPK(Data_Lens_Internal_Forget.strongForget));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))((function () {
                          var v3 = new Data_Tuple.Tuple(v1 < v.bInfo.endTime, Data_Maybe.isNothing(encPkM));
                          if (v3.value0 && v3.value1) {
                              return warn("Ballot has not ended, determining live results and using current delegations...");
                          };
                          if (v3.value0 && !v3.value1) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Aff.monadAff))("Error: The ballot has ended but I cannot determine the results due as the secret key has not been released");
                          };
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Aff.monadAff))(Data_Unit.unit);
                      })())(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))((function () {
                              if (v.bInfo.encSecKey instanceof Data_Maybe.Nothing) {
                                  return log("Ballot is not encrypted, proceeding...");
                              };
                              if (v.bInfo.encSecKey instanceof Data_Maybe.Just) {
                                  return log("The ballot encryption secret key is " + Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(v.bInfo.encSecKey.value0));
                              };
                              throw new Error("Failed pattern match at SV.Light.AuditBallot line 148, column 5 - line 150, column 75: " + [ v.bInfo.encSecKey.constructor.name ]);
                          })())(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Ballot smart contract reports " + (Data_Show.show(Data_Show.showInt)(v.bInfo.nVotesCast) + " were cast.")))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Retrieving votes now. This may take some time."))(function () {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Control_Monad_Aff_AVar.makeVar(0)))(function (v3) {
                                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(getBallots(bbSC)(v.bInfo)(incrementBallotProgress(v.bInfo.nVotesCast)(logAff)(v3))))(function (v4) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Retrieved " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v4)) + " votes")))(function () {
                                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(removeDupes(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Aff.monadAff))(v4))(function (v5) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Removing repeated votes took nVotes from " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v4)) + (" to " + Data_Show.show(Data_Show.showInt)(Data_Array.length(v5))))))(function () {
                                                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))((function () {
                                                              var $164 = Data_Maybe.isJust(Data_Lens_Getter.viewOn(v.bSpec)(SV_Types_Lenses._encryptionPK(Data_Lens_Internal_Forget.strongForget)));
                                                              if ($164) {
                                                                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Aff.monadAff))("Ballot decryption not yet supported");
                                                              };
                                                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Aff.monadAff))(v5);
                                                          })())(function (v6) {
                                                              var ballotMap = Data_Map.fromFoldable(Network_Ethereum_Core_Signatures.addressOrd)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v7) {
                                                                  return new Data_Tuple.Tuple(v7.voterAddr, v7);
                                                              })(v6));
                                                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Control_Monad_Aff.joinFiber(v2)))(function (v7) {
                                                                  var ballotStartCC = Network_Ethereum_Web3_Types_Types.BN.create(Data_Newtype.wrap(Network_Ethereum_Web3_Types_Types.newtypeBlockNumber)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(v7.value0)));
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Finding all delegates..."))(function () {
                                                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(SV_Light_Delegation.getDelegates({
                                                                          tknAddr: tknAddr,
                                                                          allBallots: v6
                                                                      })(dlgtSC)(Network_Ethereum_Web3_Types_Types.BN.create(Data_Newtype.wrap(Network_Ethereum_Web3_Types_Types.newtypeBlockNumber)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(v7.value1))))))(function (v8) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Found " + (Data_Show.show(Data_Show.showInt)(Data_Map.size(v8)) + " relevant delegations")))(function () {
                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(logDelegates(v8)))(function () {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Getting balances for all addresses..."))(function () {
                                                                                      var allVoters = Data_Functor.map(Data_Functor.functorArray)(function (v9) {
                                                                                          return v9.voterAddr;
                                                                                      })(v6);
                                                                                      var allRelevantTknHolders = SecureVote_Utils_Array.fromList(Data_Map.keys(v8));
                                                                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(removeBannedAddrs)(getBalances(ercSC)(v7.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(allVoters)(allRelevantTknHolders)))))(function (v9) {
                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Got " + (Data_Show.show(Data_Show.showInt)(Data_Map.size(v9)) + " total balances")))(function () {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(logBalances(v9)))(function () {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Calculating weighted ballots according to ERC20 balances..."))(function () {
                                                                                                      var v10 = SecureVote_Utils_Array.onlyJust(Data_Functor.map(Data_Functor.functorArray)(getVoteOrRecurse(ballotMap)(v8))(Data_Map.toUnfoldable(Data_Unfoldable.unfoldableArray)(v9)));
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(logDev("Weighted Ballots: \x0a" + Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("\x0a")(Data_Functor.map(Data_Functor.functorArray)(Data_Record_ShowRecord.showRecord()(Data_Record_ShowRecord.showRowListConsShow(Network_Ethereum_Core_BigNumber.showBigNumber)(Data_Record_ShowRecord.showRowListConsRecord()(Data_Record_ShowRecord.showRowListConsShow(Network_Ethereum_Core_HexString.showHexString)(Data_Record_ShowRecord.showRowListConsShow(Data_Show.showInt)(Data_Record_ShowRecord.showRowListConsShow(Network_Ethereum_Core_Signatures.addressShow)(Data_Record_ShowRecord.showRowListConsShow(Network_Ethereum_Core_HexString.showHexString)(Data_Record_ShowRecord.showRowListNil)()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "voterPk";
                                                                                                      })))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "voterAddr";
                                                                                                      })))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "i";
                                                                                                      })))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "ballot";
                                                                                                      })))(Data_Record_ShowRecord.showRowListConsShow(Network_Ethereum_Core_Signatures.addressShow)(Data_Record_ShowRecord.showRowListNil)()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "origVoter";
                                                                                                      })))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "ballot";
                                                                                                      })))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))()(new Data_Symbol.IsSymbol(function () {
                                                                                                          return "bal";
                                                                                                      }))))(v10))))(function () {
                                                                                                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Aff.monadAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(function ($196) {
                                                                                                              return Network_Ethereum_Core_BigNumber.unsafeToInt(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))($196));
                                                                                                          })(ercSC(web3NoArgs(SecureVote_Contracts_FakeErc20.decimals))(Network_Ethereum_Web3_Types_Types.Latest.value)(Data_Unit.unit))))(function (v11) {
                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Aff.monadAff))(log("Calculating final results..."))(function () {
                                                                                                                  var ballotResults = Data_Functor.mapFlipped(Data_Functor.functorArray)(getResults(ballotOptions)(v10))(Data_Record.modify(new Data_Symbol.IsSymbol(function () {
                                                                                                                      return "count";
                                                                                                                  }))()()(Data_Symbol.SProxy.value)(function ($197) {
                                                                                                                      return Data_Decimal.toFixed(v11)(Data_Function.flip(Data_EuclideanRing.div(Data_Decimal.euclideanRingDecimal))(Data_Decimal.pow(Data_Decimal.fromInt(10))(Data_Decimal.fromInt(v11)))(SV_Utils_BigNumber.bnToDec($197)));
                                                                                                                  }));
                                                                                                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Aff.monadAff))({
                                                                                                                      nVotes: v.bInfo.nVotesCast,
                                                                                                                      ballotResults: ballotResults
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["getBallotInfo"] = getBallotInfo;
  exports["getBallotSpec"] = getBallotSpec;
  exports["runBallotCount"] = runBallotCount;
  exports["incrementBallotProgress"] = incrementBallotProgress;
  exports["getBallots"] = getBallots;
  exports["removeDupes"] = removeDupes;
  exports["getBalances"] = getBalances;
  exports["bannedAddrs"] = bannedAddrs;
  exports["removeBannedAddrs"] = removeBannedAddrs;
  exports["findEthBlockBefore"] = findEthBlockBefore;
  exports["getBlockTimestamp"] = getBlockTimestamp;
  exports["getVoteOrRecurse"] = getVoteOrRecurse;
  exports["getResults"] = getResults;
})(PS["SV.Light.AuditBallot"] = PS["SV.Light.AuditBallot"] || {});
(function(exports) {const nh = require('eth-ens-namehash')

  exports.namehashImpl = function(ensName) {
      const node = nh.hash(ensName)
      console.log("calculated node", node, "from name", ensName)
      return node
  }
})(PS["SV.Light.SCs.ENS"] = PS["SV.Light.SCs.ENS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var SV_Light_Types_RunBallot = PS["SV.Light.Types.RunBallot"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Web3_Web3 = PS["SecureVote.Web3.Web3"];        
  var runWeb3OrThrow = function (dictShow) {
      return Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(dictShow))(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Network_Ethereum_Web3_Types_Types.showWeb3Error))(SecureVote_Web3_Web3.runWeb3_));
  };
  var mkTos = function (addr) {
      return Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._to(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(addr))(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions);
  };
  exports["mkTos"] = mkTos;
  exports["runWeb3OrThrow"] = runWeb3OrThrow;
})(PS["SV.Light.SmartContracts"] = PS["SV.Light.SmartContracts"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var resolver = function (x0) {
      return function (cm) {
          return function (r) {
              var resolver$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))(new Data_Symbol.IsSymbol(function () {
                              return "resolver(bytes32)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "node";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(resolver$prime(x0)(cm));
          };
      };
  };
  exports["resolver"] = resolver;
})(PS["SecureVote.Contracts.ENSIface"] = PS["SecureVote.Contracts.ENSIface"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var addr = function (x0) {
      return function (cm) {
          return function (r) {
              var addr$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))(new Data_Symbol.IsSymbol(function () {
                              return "addr(bytes32)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "node";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(addr$prime(x0)(cm));
          };
      };
  };
  exports["addr"] = addr;
})(PS["SecureVote.Contracts.PublicResolver"] = PS["SecureVote.Contracts.PublicResolver"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];        
  var mToE = function (err) {
      return function (m) {
          return Data_Maybe.maybe(new Data_Either.Left(err))(Data_Either.Right.create)(m);
      };
  };
  exports["mToE"] = mToE;
})(PS["SecureVote.Utils.Monads"] = PS["SecureVote.Utils.Monads"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["SV.Light.SCs.ENS"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var SV_Light_SmartContracts = PS["SV.Light.SmartContracts"];
  var SV_Prelude = PS["SV.Prelude"];
  var SecureVote_Contracts_ENSIface = PS["SecureVote.Contracts.ENSIface"];
  var SecureVote_Contracts_PublicResolver = PS["SecureVote.Contracts.PublicResolver"];
  var SecureVote_Utils_Monads = PS["SecureVote.Utils.Monads"];
  var SecureVote_Utils_Web3Bin = PS["SecureVote.Utils.Web3Bin"];
  var SecureVote_Web3_Web3 = PS["SecureVote.Web3.Web3"];        
  var lookupEnsNode = function (node) {
      return function (ensLoc) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_ENSIface.resolver(SV_Light_SmartContracts.mkTos(ensLoc.address))(Network_Ethereum_Web3_Types_Types.Latest.value)({
              node: node
          })))(function (v) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_PublicResolver.addr(SV_Light_SmartContracts.mkTos(v))(Network_Ethereum_Web3_Types_Types.Latest.value)({
                  node: node
              })))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
              });
          });
      };
  };
  var ensNameToNode = function (dictKnownSize) {
      return function (ensName) {
          return SecureVote_Utils_Monads.mToE("Calculating namehash for " + (ensName + " failed"))(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(SecureVote_Utils_Web3Bin.hexToBytesN(dictKnownSize))(Network_Ethereum_Core_HexString.mkHexString)($foreign.namehashImpl(ensName)));
      };
  };
  var lookupEns = function (ensName) {
      return function (ensLoc) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.eToAff(Data_Show.showString)(ensNameToNode(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3))(ensName)))(function (v) {
              return lookupEnsNode(v)(ensLoc);
          });
      };
  };
  exports["ensNameToNode"] = ensNameToNode;
  exports["lookupEns"] = lookupEns;
  exports["lookupEnsNode"] = lookupEnsNode;
})(PS["SV.Light.SCs.ENS"] = PS["SV.Light.SCs.ENS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Solidity_Vector = PS["Network.Ethereum.Web3.Solidity.Vector"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var getBackend = function (x0) {
      return function (cm) {
          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple0)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBaseNull))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))(new Data_Symbol.IsSymbol(function () {
              return "getBackend()";
          }))(x0)(cm)(Data_Functor_Tagged.tagged(Network_Ethereum_Web3_Solidity_Tuple.Tuple0.value)));
      };
  };
  var getBBFarmID = function (x0) {
      return function (cm) {
          return function (r) {
              var getBBFarmID$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN4)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize4))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize8))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize8)))))(new Data_Symbol.IsSymbol(function () {
                              return "getBBFarmID(bytes4)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "bbNamespace";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(getBBFarmID$prime(x0)(cm));
          };
      };
  };
  var getBBFarm = function (x0) {
      return function (cm) {
          return function (r) {
              var getBBFarm$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize8))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize8))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))(new Data_Symbol.IsSymbol(function () {
                              return "getBBFarm(uint8)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "bbFarmId";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(getBBFarm$prime(x0)(cm));
          };
      };
  };
  exports["getBBFarm"] = getBBFarm;
  exports["getBackend"] = getBackend;
  exports["getBBFarmID"] = getBBFarmID;
})(PS["SecureVote.Contracts.SVIndex"] = PS["SecureVote.Contracts.SVIndex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Tagged = PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Contract = PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity = PS["Network.Ethereum.Web3.Solidity"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_EncodingType = PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Event = PS["Network.Ethereum.Web3.Solidity.Event"];
  var Network_Ethereum_Web3_Solidity_Generic = PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types = PS["Network.Ethereum.Web3.Types"];
  var Network_Ethereum_Web3_Types_EtherUnit = PS["Network.Ethereum.Web3.Types.EtherUnit"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var getDErc20 = function (x0) {
      return function (cm) {
          return function (r) {
              var getDErc20$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytes(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesN(Network_Ethereum_Web3_Solidity_Size.byteSize32))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAddress))))(new Data_Symbol.IsSymbol(function () {
                              return "getDErc20(bytes32)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(Data_Functor_Tagged.untagged(y2))));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "democHash";
              }))()(Type_Row.rowLacks()()()(Type_Row.rowLacking))(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(getDErc20$prime(x0)(cm));
          };
      };
  };
  exports["getDErc20"] = getDErc20;
})(PS["SecureVote.Contracts.SVIndexBackend"] = PS["SecureVote.Contracts.SVIndexBackend"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Crypt_NaCl = PS["Crypt.NaCl"];
  var Data_Array = PS["Data.Array"];
  var Data_Decimal = PS["Data.Decimal"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Network_Ethereum_Core_BigNumber = PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_Ethereum_Web3_Solidity_Bytes = PS["Network.Ethereum.Web3.Solidity.Bytes"];
  var Network_Ethereum_Web3_Solidity_Size = PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_UInt = PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types_Types = PS["Network.Ethereum.Web3.Types.Types"];
  var Node_Process = PS["Node.Process"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var SV_Light_AuditBallot = PS["SV.Light.AuditBallot"];
  var SV_Light_Delegation = PS["SV.Light.Delegation"];
  var SV_Light_SCs_ENS = PS["SV.Light.SCs.ENS"];
  var SV_Light_SmartContracts = PS["SV.Light.SmartContracts"];
  var SV_Light_Types_ENS = PS["SV.Light.Types.ENS"];
  var SV_Light_Types_Eth = PS["SV.Light.Types.Eth"];
  var SV_Prelude = PS["SV.Prelude"];
  var SV_Types_Lenses = PS["SV.Types.Lenses"];
  var SV_Types_OutboundLogs = PS["SV.Types.OutboundLogs"];
  var SV_Utils_BigNumber = PS["SV.Utils.BigNumber"];
  var SV_Utils_UInt = PS["SV.Utils.UInt"];
  var SecureVote_Contracts_SVIndex = PS["SecureVote.Contracts.SVIndex"];
  var SecureVote_Contracts_SVIndexBackend = PS["SecureVote.Contracts.SVIndexBackend"];
  var SecureVote_Democs_SwarmMVP_BallotContract = PS["SecureVote.Democs.SwarmMVP.BallotContract"];
  var SecureVote_Democs_SwarmMVP_Types = PS["SecureVote.Democs.SwarmMVP.Types"];
  var SecureVote_Utils_Array = PS["SecureVote.Utils.Array"];
  var SecureVote_Utils_Decimal = PS["SecureVote.Utils.Decimal"];
  var SecureVote_Utils_String = PS["SecureVote.Utils.String"];
  var SecureVote_Utils_Web3Bin = PS["SecureVote.Utils.Web3Bin"];
  var SecureVote_Web3_Web3 = PS["SecureVote.Web3.Web3"];
  var app = function (v) {
      return function (updateF) {
          var uWarn = function (msg) {
              return Control_Apply.applySecond(Control_Monad_Aff.applyAff)(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(updateF(SV_Types_OutboundLogs.mkSUWarn(msg))))(Control_Monad_Aff_Console.warn(msg));
          };
          var uLog = function (msg) {
              return Control_Apply.applySecond(Control_Monad_Aff.applyAff)(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(updateF(SV_Types_OutboundLogs.mkSULog(msg))))(Control_Monad_Aff_Console.log(msg));
          };
          var mkBResStrMap = function (bRes) {
              return Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return new Data_Tuple.Tuple(v1.name, {
                      count: v1.count,
                      nVotes: v1.nVotes
                  });
              })(bRes));
          };
          var exitMsgHeader = function (exitC) {
              var $42 = exitC === 0;
              if ($42) {
                  return ">>> SUCCESS <<<";
              };
              return ">>> ERROR <<<";
          };
          var exitCode = function (e) {
              var $43 = Data_Either.isRight(e);
              if ($43) {
                  return 0;
              };
              return 1;
          };
          var usingKovan = v.startingNetwork === "42";
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)((function () {
              if (usingKovan) {
                  return uLog("-- DEV MODE (Kovan) --");
              };
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
          })())(function () {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("No URL provided for network with ID: " + v.startingNetwork)(Data_StrMap.lookup(v.startingNetwork)(v.ethUrls)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(SecureVote_Web3_Web3.setProvider(v1)))(function () {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("No ENS Register address provided for network with ID: " + v.startingNetwork)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkAddress)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_HexString.mkHexString)(Data_StrMap.lookup(v.startingNetwork)(v.ensDetails)))))(function (v2) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_SCs_ENS.lookupEns(v.indexEns)({
                              network: v.startingNetwork,
                              address: v2
                          }))(function (v3) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("got index addr: " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v3)))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("Cannot parse democHash")(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(SecureVote_Utils_Web3Bin.hexToBytesN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(Network_Ethereum_Core_HexString.mkHexString(v.democHash))))(function (v4) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uLog("Using democHash: " + Data_Show.show(Network_Ethereum_Web3_Solidity_Bytes.showBytesN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(v4)))(function () {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("Cannot parse ballotId to uint256: " + v.ballotId)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(SV_Light_Types_Eth.uint256Px))(Network_Ethereum_Core_BigNumber.parseBigNumber(Data_Int.decimal)(v.ballotId))))(function (v5) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("got ballotId: " + Data_Show.show(Network_Ethereum_Web3_Solidity_UInt.showUIntN)(v5)))(function () {
                                                  var ballotIdHex = Network_Ethereum_Core_HexString.padLeft(Network_Ethereum_Core_HexString.toHexString(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(v5)));
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uLog("Using ballotId: " + Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(ballotIdHex)))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("ballotId first 4 bytes as hex: " + Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(Network_Ethereum_Core_HexString.takeHex(8)(ballotIdHex))))(function () {
                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Prelude.mToAff("Cannot get namespace (bytes4) from ballotId: " + Data_Show.show(Network_Ethereum_Web3_Solidity_UInt.showUIntN)(v5))(SecureVote_Utils_Web3Bin.hexToBytesN(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN4))(Network_Ethereum_Core_HexString.takeHex(8)(ballotIdHex))))(function (v6) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("got bbNamespace: " + Data_Show.show(Network_Ethereum_Web3_Solidity_Bytes.showBytesN(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN4)))(v6)))(function () {
                                                                  var ixTos = SV_Light_SmartContracts.mkTos(v3);
                                                                  var getErc20 = Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_SVIndex.getBackend(ixTos)(Network_Ethereum_Web3_Types_Types.Latest.value)))(function (v7) {
                                                                      var beTos = SV_Light_SmartContracts.mkTos(v7);
                                                                      return SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_SVIndexBackend.getDErc20(beTos)(Network_Ethereum_Web3_Types_Types.Latest.value)({
                                                                          democHash: v4
                                                                      }));
                                                                  }));
                                                                  var getBBFarmAddr = Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_SVIndex.getBBFarmID(ixTos)(Network_Ethereum_Web3_Types_Types.Latest.value)({
                                                                      bbNamespace: v6
                                                                  })))(function (v7) {
                                                                      return SV_Light_SmartContracts.runWeb3OrThrow(Network_Ethereum_Web3_Types_Types.showCallError)(SecureVote_Contracts_SVIndex.getBBFarm(ixTos)(Network_Ethereum_Web3_Types_Types.Latest.value)({
                                                                          bbFarmId: v7
                                                                      }));
                                                                  }));
                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Apply.apply(Control_Monad_Aff.applyParAff)(Data_Functor.map(Control_Monad_Aff.functorParAff)(Data_Tuple.Tuple.create)(getErc20))(getBBFarmAddr)))(function (v7) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uLog("Using ERC20 address: " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v7.value0)))(function () {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(uLog("Votes stored under ballotId at address: " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v7.value1)))(function () {
                                                                              var bbFarmLoc = {
                                                                                  network: v.startingNetwork,
                                                                                  address: v7.value1
                                                                              };
                                                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_AuditBallot.getBallotInfo({
                                                                                  ballotId: v5,
                                                                                  bbFarmLoc: bbFarmLoc
                                                                              }))(function (v8) {
                                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_AuditBallot.getBallotSpec(v8.bHash))(function (v9) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)((function () {
                                                                                          var $56 = SV_Types_Lenses.getBSpecVer(v9) !== 1;
                                                                                          if ($56) {
                                                                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                                                                                          };
                                                                                          return uWarn("Warning: This proposal uses BallotSpec v1, which is deprecated. Several fields are ignored including: erc20Addr, startTime, endTime. You can safely ignore this message for proposals voted on before 1st June 2018.");
                                                                                      })())(function () {
                                                                                          var ercTos = Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._to(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v7.value0))(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions);
                                                                                          var dlgtTos = Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._to(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(SV_Light_Delegation.dlgtAddr(v.startingNetwork)))(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions);
                                                                                          var bbFarmTos = Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types._to(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v7.value1))(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions);
                                                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Except_Trans.runExceptT(SV_Light_AuditBallot.runBallotCount({
                                                                                              bInfo: v8,
                                                                                              bSpec: v9,
                                                                                              bbFarmTos: bbFarmTos,
                                                                                              ercTos: ercTos,
                                                                                              dlgtTos: dlgtTos,
                                                                                              silent: false,
                                                                                              netId: v.startingNetwork,
                                                                                              dev: v.startingNetwork === "42"
                                                                                          })(updateF)))(function (v10) {
                                                                                              var exitC = exitCode(v10);
                                                                                              var msgStart = exitMsgHeader(exitC);
                                                                                              var msgBody = (function () {
                                                                                                  if (v10 instanceof Data_Either.Left) {
                                                                                                      return v10.value0;
                                                                                                  };
                                                                                                  if (v10 instanceof Data_Either.Right) {
                                                                                                      return "\x0a\x0aResults:\x0a" + Data_Foldable.foldl(Data_Foldable.foldableArray)(function (rem) {
                                                                                                          return function (v11) {
                                                                                                              return rem + ("\x0a" + (v11.name + (" (" + (Data_Show.show(Data_Show.showInt)(v11.nVotes) + ("): " + v11.count)))));
                                                                                                          };
                                                                                                      })("")(v10.value0.ballotResults);
                                                                                                  };
                                                                                                  throw new Error("Failed pattern match at SV.Light.AuditApp line 164, column 23 - line 167, column 143: " + [ v10.constructor.name ]);
                                                                                              })();
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Console.log("\x0a" + (msgStart + ("\x0a" + msgBody))))(function () {
                                                                                                  var toRetE = (function () {
                                                                                                      if (v10 instanceof Data_Either.Right) {
                                                                                                          return (function (v11) {
                                                                                                              return new Data_Either.Right(v10.value0);
                                                                                                          })(updateF(SV_Types_OutboundLogs.mkSUSuccess({
                                                                                                              nVotes: v10.value0.nVotes,
                                                                                                              ballotResults: mkBResStrMap(v10.value0.ballotResults)
                                                                                                          })));
                                                                                                      };
                                                                                                      if (v10 instanceof Data_Either.Left) {
                                                                                                          return (function (v11) {
                                                                                                              return new Data_Either.Left(v10.value0);
                                                                                                          })(updateF(SV_Types_OutboundLogs.mkSUFail("ERROR: " + v10.value0)));
                                                                                                      };
                                                                                                      throw new Error("Failed pattern match at SV.Light.AuditApp line 170, column 22 - line 173, column 85: " + [ v10.constructor.name ]);
                                                                                                  })();
                                                                                                  if (toRetE instanceof Data_Either.Right) {
                                                                                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Right.create(new Data_Tuple.Tuple(exitC, toRetE.value0)));
                                                                                                  };
                                                                                                  if (toRetE instanceof Data_Either.Left) {
                                                                                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Left.create(new Data_Tuple.Tuple(exitC, toRetE.value0)));
                                                                                                  };
                                                                                                  throw new Error("Failed pattern match at SV.Light.AuditApp line 175, column 9 - line 177, column 54: " + [ toRetE.constructor.name ]);
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["app"] = app;
})(PS["SV.Light.AuditApp"] = PS["SV.Light.AuditApp"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Crypt_NaCl = PS["Crypt.NaCl"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var IPFS = PS["IPFS"];
  var Network_Ethereum_Web3 = PS["Network.Ethereum.Web3"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Process = PS["Node.Process"];
  var Node_Yargs_Applicative = PS["Node.Yargs.Applicative"];
  var Node_Yargs_Setup = PS["Node.Yargs.Setup"];
  var SV_Light_AuditApp = PS["SV.Light.AuditApp"];
  var SV_Prelude = PS["SV.Prelude"];        
  var main = (function () {
      var setup = Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(Node_Yargs_Setup.usage("$0 --bScAddr 0x1234abcd... [--ethUrl <ethNodeUrl>] [--dev <boolean>]"))(Node_Yargs_Setup.defaultHelp);
      var args = {
          ballotId: "",
          ensDetails: Data_StrMap.empty,
          ethUrls: Data_StrMap.empty,
          indexEns: "",
          startingNetwork: "",
          democHash: "",
          dev: true
      };
      return Control_Monad_Aff.launchAff_(Control_Bind.bind(Control_Monad_Aff.bindAff)(SV_Light_AuditApp.app(args)(function (v) {
          return Data_Unit.unit;
      }))(function (v) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Node_Process.exit((function () {
              if (v instanceof Data_Either.Right) {
                  return v.value0.value0;
              };
              if (v instanceof Data_Either.Left) {
                  return v.value0.value0;
              };
              throw new Error("Failed pattern match at SV.AuditCLI line 42, column 26 - line 44, column 38: " + [ v.constructor.name ]);
          })()));
      }));
  })();
  exports["main"] = main;
})(PS["SV.AuditCLI"] = PS["SV.AuditCLI"] || {});
PS["SV.AuditCLI"].main();